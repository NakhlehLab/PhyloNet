package runHmm;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import reader.Parser;
import be.ac.ulg.montefiore.run.jahmm.Hmm;
import be.ac.ulg.montefiore.run.jahmm.phmm.HiddenState;
import be.ac.ulg.montefiore.run.jahmm.phmm.ObservationMap;
import be.ac.ulg.montefiore.run.jahmm.phmm.TransitionProbabilityParameters;
import edu.rice.cs.bioinfo.programs.phylonet.structs.network.Network;

public class AllInformation {
    //    static public final double tolerated_error = 1e-5;		/* Sum of probabilities margin of error allowed */
    //
    //    // HMM
    //    static public Hmm<ObservationMap> myhmm;						/* The entire HMM */
    //
    //
    //    // Trees and Hidden States
    //    static public int numStates = -1;								/* The number of states for the HMM */
    //    static public ArrayList<HiddenState> trees_states;				/* List of all states/trees */
    //
    //    // argh - in lieu of worrying about EvoTree.equals() method
    //    // Maintain equivalence classes among hidden states based on shared parental tree.
    //    static public Map<Network<Double>,Set<HiddenState>> parentalTreeClasses;
    //    static public TransitionProbabilityParameters transitionProbabilityParameters;
    //
    //    // Parser
    //    static public Parser fParser;									/* The parser for all basic info and read sequences --> also calculates likelihood */
    //    static public ArrayList<String> alphabet;						/* ArrayList of legal characters/symbols */
    //    static public ArrayList<ObservationMap> sequence;				/* a REUSABLE arraylist that holds the converted and final usable sequence for ONE file */
    //    static public HashMap<String, Integer> seqTypes;				/* mapping from types of sequences to integers */
    //    static public Vector<String> taxa; 								//  reverse the above map
    //    static public HashMap<String, String> alleleSpeciesMap;			/* Allele to Species Mapping */



    /**
     * Calculate initial transition probability matrix a_{ij}.
     * See revised writeup for details.
     *
     * Call this after changing parental tree branch lengths
     */
    public static double[][] calculateAij (ArrayList<HiddenState> trees_states, double recombinationFreq, double hybridizationFreq,Map<Network<Double>,Set<HiddenState>> parentalTreeClasses) {
	double[][] a = new double[trees_states.size()][trees_states.size()];
	for (int i = 0; i < a.length; i++) {
	    HiddenState si = trees_states.get(i);
	    double totalNonSelfTransitionProbabilities = 0.0;
	    for (int j = 0 ; j < a[i].length; j++) {
		// set self-transition probability at the end
		if (i == j) {
		    continue;
		}

		HiddenState sj = trees_states.get(j);
		a[i][j] = sj.calculateProbabilityOfGeneGenealogyInParentalTree();
		if (checkSameParentalClass(parentalTreeClasses, si, sj)) {
		    a[i][j] *= recombinationFreq;
		}
		else {
		    a[i][j] *= hybridizationFreq;
		}

		totalNonSelfTransitionProbabilities += a[i][j];
	    }

	    // now set self-transition probability
	    a[i][i] = 1.0 - totalNonSelfTransitionProbabilities;
	}

	// strict!
	if (!verifyAij(a)) {
	    System.err.println ("ERROR: verifyAij() failed. Returning null to signal error.");
	    return (null);
	}

	return (a);
    }


    public static boolean checkSameParentalClass (Map<Network<Double>,Set<HiddenState>> parentalTreeClasses, HiddenState si, HiddenState sj) {
        Set<HiddenState> sic = parentalTreeClasses.get(si.getParentalTree());
        return (sic.contains(sj));
    }


    /**
     * By construction, rows of a_ij matrix sum to one.
     */
    public static boolean verifyAij (double[][] a) {
        for (int i = 0; i < a.length; i++) {
	    for (int j = 0; j < a[i].length; j++) {
		if ((a[i][j] < 0.0) || (a[i][j] > 1.0)) {
		    System.err.println ("ERROR: entry in a_ij transition matrix is invalid. " + a[i][j]);
		    return (false);
		}
	    }
	}

	return (true);
    }

}
