package edu.rice.cs.bioinfo.library.phylogenetics.scoring.network.acceptancetesting;

import edu.rice.cs.bioinfo.library.phylogenetics.Graph;
import edu.rice.cs.bioinfo.library.phylogenetics.GraphReadOnly;
import edu.rice.cs.bioinfo.library.phylogenetics.PhyloEdge;
import edu.rice.cs.bioinfo.library.phylogenetics.scoring.network.MDCOnNetworkYF;
import edu.rice.cs.bioinfo.library.programming.Func1;
import edu.rice.cs.bioinfo.library.programming.Func2;
import edu.rice.cs.bioinfo.library.programming.Func3;
import edu.rice.cs.bioinfo.library.programming.Func4;
import junit.framework.Assert;
import org.junit.Test;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

/**
 * Created by IntelliJ IDEA.
 * User: Matt
 * Date: 5/14/12
 * Time: 1:57 PM
 * To change this template use File | Settings | File Templates.
 */
public abstract class MDCOnNetworkYFFromRichNewick<G extends Graph<String,PhyloEdge<String>>>
{
    protected abstract G makeNetwork(String richNewick);

     protected Func1<G, String> makeNode = new Func1<G, String>()
    {
        //private int counter = 0;

        public String execute(G input1) {
            //return IterableHelp.countInt(input1.getNodes()) + "";
            String newNode;
            Set<String> existingNames = new HashSet<String>();
            for(String node: input1.getNodes()){
                existingNames.add(node);
            }

            int i = 1;
            newNode = "i" + i;
            while(existingNames.contains(newNode)){
                newNode = "i" + (++i);
            }

            return newNode;
        }
    };

    protected Func3<G, String, String, PhyloEdge<String>> makeEdge = new Func3<G, String, String, PhyloEdge<String>>()
    {
        public PhyloEdge<String> execute(G arg1, String source, String destination) {
            return new PhyloEdge<String>(source, destination);
        }
    };

    private final Func1<String,String> _getNetworkNodeLabel  = new Func1<String,String>()
    {
        public String execute(String node) {
            return node;
        }
    };

    private final Func2<GraphReadOnly<String,PhyloEdge<String>>, PhyloEdge<String>, Double> _getNetworkDistance = new Func2<GraphReadOnly<String, PhyloEdge<String>>, PhyloEdge<String>, Double>() {
        public Double execute(GraphReadOnly<String, PhyloEdge<String>> network, PhyloEdge<String> edge) {
            return edge.getBranchLength();
        }
    };

    private final Func2<GraphReadOnly<String,PhyloEdge<String>>, PhyloEdge<String>, Double> _getProbability = new Func2<GraphReadOnly<String, PhyloEdge<String>>, PhyloEdge<String>, Double>() {
        public Double execute(GraphReadOnly<String, PhyloEdge<String>> network, PhyloEdge<String> edge) {
            return edge.getBranchLength();
        }
    };

    private final Func4<String,String,Double,Double,PhyloEdge<String>> _makeNetworkEdge = new Func4<String, String, Double, Double, PhyloEdge<String>>() {
        public PhyloEdge<String> execute(String source, String destination, Double distance, Double probability) {
            PhyloEdge<String> edge = new PhyloEdge<String>(source,destination);
            edge.setBranchLength(distance);
            edge.setProbability(probability);
            return edge;
        }
    };

    @Test
    public void test1()
    {
        Graph<String,PhyloEdge<String>> network = makeNetwork("((A:2,((B:1,C:1)K:1)X#1:0::0.3)J:1,(D:2,X#1:0::0.7)L:1)M;");
        Graph<String,PhyloEdge<String>> gt1 = makeNetwork("(C,((B,D),A));");
        Graph<String,PhyloEdge<String>> gt2 = makeNetwork("(B,(D,(C,A)));");
        Graph<String,PhyloEdge<String>> gt3 = makeNetwork("(D,(B,(C,A)));");
        Graph<String,PhyloEdge<String>> gt4 = makeNetwork("((B,D),(C,A));");
        Graph<String,PhyloEdge<String>> gt5 = makeNetwork("((B,D),(C,A));");
        LinkedList<Graph<String,PhyloEdge<String>>> geneTrees = new LinkedList<Graph<String,PhyloEdge<String>>>();
        geneTrees.add(gt1);
        geneTrees.add(gt2);
        geneTrees.add(gt3);
        geneTrees.add(gt4);
        geneTrees.add(gt5);

        MDCOnNetworkYF scorer = new MDCOnNetworkYF();
        scorer.setPrintDetails(false);
        List<Integer> result = scorer.countExtraCoal(network, geneTrees, null, _getNetworkNodeLabel, _getNetworkNodeLabel, _getNetworkDistance, _getProbability, _getNetworkDistance, _getProbability,
                              _makeNetworkEdge, _makeNetworkEdge);
        Assert.assertTrue(result.get(0) == 2);
        Assert.assertTrue(result.get(1) == 2);
        Assert.assertTrue(result.get(2) == 1);
        Assert.assertTrue(result.get(3) == 1);
        Assert.assertTrue(result.get(4) == 1);

        int i = 0;
    }


    @Test
    public void test2()
    {
        Graph<String,PhyloEdge<String>> network = makeNetwork("((A:3,((B:2,(C:1,(D:1)H#1:0::0.4):1):1)X#2:0::0.3):1,((F:2,(E:1,H#1:0::0.6):1):1,X#2:0::0.7):1);");
        LinkedList<Graph<String,PhyloEdge<String>>> geneTrees = new LinkedList<Graph<String,PhyloEdge<String>>>();
        geneTrees.add(makeNetwork("(C,((D,(E,(B,F))),A));"));
        geneTrees.add(makeNetwork("(D,((E,(B,F)),(C,A)));"));
        geneTrees.add(makeNetwork("(E,((B,F),(D,(C,A))));"));
        geneTrees.add(makeNetwork("(B,(F,(E,(D,(C,A)))));"));
        geneTrees.add(makeNetwork("(F,(B,(E,(D,(C,A)))));"));
        geneTrees.add(makeNetwork("((B,F),(E,(D,(C,A))));"));
        geneTrees.add(makeNetwork("((E,(B,F)),(D,(C,A)));"));
        geneTrees.add(makeNetwork("((D,(E,(B,F))),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,(D,(E,(B,F)))));"));
        geneTrees.add(makeNetwork("(C,((D,(B,(E,F))),A));"));
        geneTrees.add(makeNetwork("(D,((B,(E,F)),(C,A)));"));
        geneTrees.add(makeNetwork("(B,((E,F),(D,(C,A))));"));
        geneTrees.add(makeNetwork("(E,(F,(B,(D,(C,A)))));"));
        geneTrees.add(makeNetwork("(F,(E,(B,(D,(C,A)))));"));
        geneTrees.add(makeNetwork("((E,F),(B,(D,(C,A))));"));
        geneTrees.add(makeNetwork("((B,(E,F)),(D,(C,A)));"));
        geneTrees.add(makeNetwork("((D,(B,(E,F))),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,(D,(B,(E,F)))));"));
        geneTrees.add(makeNetwork("(C,(((B,E),(D,F)),A));"));
        geneTrees.add(makeNetwork("(B,(E,((D,F),(C,A))));"));
        geneTrees.add(makeNetwork("(E,(B,((D,F),(C,A))));"));
        geneTrees.add(makeNetwork("((B,E),((D,F),(C,A)));"));
        geneTrees.add(makeNetwork("(D,(F,((B,E),(C,A))));"));
        geneTrees.add(makeNetwork("(F,(D,((B,E),(C,A))));"));
        geneTrees.add(makeNetwork("((D,F),((B,E),(C,A)));"));
        geneTrees.add(makeNetwork("(((B,E),(D,F)),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,((B,E),(D,F))));"));
        geneTrees.add(makeNetwork("(C,((D,((B,E),F)),A));"));
        geneTrees.add(makeNetwork("(D,(((B,E),F),(C,A)));"));
        geneTrees.add(makeNetwork("(B,(E,(F,(D,(C,A)))));"));
        geneTrees.add(makeNetwork("(E,(B,(F,(D,(C,A)))));"));
        geneTrees.add(makeNetwork("((B,E),(F,(D,(C,A))));"));
        geneTrees.add(makeNetwork("(F,((B,E),(D,(C,A))));"));
        geneTrees.add(makeNetwork("(((B,E),F),(D,(C,A)));"));
        geneTrees.add(makeNetwork("((D,((B,E),F)),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,(D,((B,E),F))));"));
        geneTrees.add(makeNetwork("(D,((B,E),((C,F),A)));"));
        geneTrees.add(makeNetwork("(B,(E,(D,((C,F),A))));"));
        geneTrees.add(makeNetwork("(E,(B,(D,((C,F),A))));"));
        geneTrees.add(makeNetwork("((B,E),(D,((C,F),A)));"));
        geneTrees.add(makeNetwork("((D,(B,E)),((C,F),A));"));
        geneTrees.add(makeNetwork("(C,(F,((D,(B,E)),A)));"));
        geneTrees.add(makeNetwork("(F,(C,((D,(B,E)),A)));"));
        geneTrees.add(makeNetwork("((C,F),((D,(B,E)),A));"));
        geneTrees.add(makeNetwork("(A,((D,(B,E)),(C,F)));"));
        geneTrees.add(makeNetwork("(C,(((D,(B,E)),F),A));"));
        geneTrees.add(makeNetwork("(D,((B,E),(F,(C,A))));"));
        geneTrees.add(makeNetwork("(B,(E,(D,(F,(C,A)))));"));
        geneTrees.add(makeNetwork("(E,(B,(D,(F,(C,A)))));"));
        geneTrees.add(makeNetwork("((B,E),(D,(F,(C,A))));"));
        geneTrees.add(makeNetwork("((D,(B,E)),(F,(C,A)));"));
        geneTrees.add(makeNetwork("(F,((D,(B,E)),(C,A)));"));
        geneTrees.add(makeNetwork("(((D,(B,E)),F),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,((D,(B,E)),F)));"));
        geneTrees.add(makeNetwork("(C,((D,(B,E)),(A,F)));"));
        geneTrees.add(makeNetwork("(D,((B,E),(C,(A,F))));"));
        geneTrees.add(makeNetwork("(B,(E,(D,(C,(A,F)))));"));
        geneTrees.add(makeNetwork("(E,(B,(D,(C,(A,F)))));"));
        geneTrees.add(makeNetwork("((B,E),(D,(C,(A,F))));"));
        geneTrees.add(makeNetwork("((D,(B,E)),(C,(A,F)));"));
        geneTrees.add(makeNetwork("(A,(F,(C,(D,(B,E)))));"));
        geneTrees.add(makeNetwork("(F,(A,(C,(D,(B,E)))));"));
        geneTrees.add(makeNetwork("((C,(D,(B,E))),(A,F));"));
        geneTrees.add(makeNetwork("(C,((B,(E,(D,F))),A));"));
        geneTrees.add(makeNetwork("(B,((E,(D,F)),(C,A)));"));
        geneTrees.add(makeNetwork("(E,((D,F),(B,(C,A))));"));
        geneTrees.add(makeNetwork("(D,(F,(E,(B,(C,A)))));"));
        geneTrees.add(makeNetwork("(F,(D,(E,(B,(C,A)))));"));
        geneTrees.add(makeNetwork("((D,F),(E,(B,(C,A))));"));
        geneTrees.add(makeNetwork("((E,(D,F)),(B,(C,A)));"));
        geneTrees.add(makeNetwork("((B,(E,(D,F))),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,(B,(E,(D,F)))));"));
        geneTrees.add(makeNetwork("(C,((B,(D,(E,F))),A));"));
        geneTrees.add(makeNetwork("(B,((D,(E,F)),(C,A)));"));
        geneTrees.add(makeNetwork("(D,((E,F),(B,(C,A))));"));
        geneTrees.add(makeNetwork("(E,(F,(D,(B,(C,A)))));"));
        geneTrees.add(makeNetwork("(F,(E,(D,(B,(C,A)))));"));
        geneTrees.add(makeNetwork("((E,F),(D,(B,(C,A))));"));
        geneTrees.add(makeNetwork("((D,(E,F)),(B,(C,A)));"));
        geneTrees.add(makeNetwork("((B,(D,(E,F))),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,(B,(D,(E,F)))));"));
        geneTrees.add(makeNetwork("(C,(((D,E),(B,F)),A));"));
        geneTrees.add(makeNetwork("(D,(E,((B,F),(C,A))));"));
        geneTrees.add(makeNetwork("(E,(D,((B,F),(C,A))));"));
        geneTrees.add(makeNetwork("((D,E),((B,F),(C,A)));"));
        geneTrees.add(makeNetwork("(B,(F,((D,E),(C,A))));"));
        geneTrees.add(makeNetwork("(F,(B,((D,E),(C,A))));"));
        geneTrees.add(makeNetwork("((B,F),((D,E),(C,A)));"));
        geneTrees.add(makeNetwork("(((D,E),(B,F)),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,((D,E),(B,F))));"));
        geneTrees.add(makeNetwork("(C,((B,((D,E),F)),A));"));
        geneTrees.add(makeNetwork("(B,(((D,E),F),(C,A)));"));
        geneTrees.add(makeNetwork("(D,(E,(F,(B,(C,A)))));"));
        geneTrees.add(makeNetwork("(E,(D,(F,(B,(C,A)))));"));
        geneTrees.add(makeNetwork("((D,E),(F,(B,(C,A))));"));
        geneTrees.add(makeNetwork("(F,((D,E),(B,(C,A))));"));
        geneTrees.add(makeNetwork("(((D,E),F),(B,(C,A)));"));
        geneTrees.add(makeNetwork("((B,((D,E),F)),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,(B,((D,E),F))));"));
        geneTrees.add(makeNetwork("(B,((D,E),((C,F),A)));"));
        geneTrees.add(makeNetwork("(D,(E,(B,((C,F),A))));"));
        geneTrees.add(makeNetwork("(E,(D,(B,((C,F),A))));"));
        geneTrees.add(makeNetwork("((D,E),(B,((C,F),A)));"));
        geneTrees.add(makeNetwork("((B,(D,E)),((C,F),A));"));
        geneTrees.add(makeNetwork("(C,(F,((B,(D,E)),A)));"));
        geneTrees.add(makeNetwork("(F,(C,((B,(D,E)),A)));"));
        geneTrees.add(makeNetwork("((C,F),((B,(D,E)),A));"));
        geneTrees.add(makeNetwork("(A,((B,(D,E)),(C,F)));"));
        geneTrees.add(makeNetwork("(C,(((B,(D,E)),F),A));"));
        geneTrees.add(makeNetwork("(B,((D,E),(F,(C,A))));"));
        geneTrees.add(makeNetwork("(D,(E,(B,(F,(C,A)))));"));
        geneTrees.add(makeNetwork("(E,(D,(B,(F,(C,A)))));"));
        geneTrees.add(makeNetwork("((D,E),(B,(F,(C,A))));"));
        geneTrees.add(makeNetwork("((B,(D,E)),(F,(C,A)));"));
        geneTrees.add(makeNetwork("(F,((B,(D,E)),(C,A)));"));
        geneTrees.add(makeNetwork("(((B,(D,E)),F),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,((B,(D,E)),F)));"));
        geneTrees.add(makeNetwork("(C,((B,(D,E)),(A,F)));"));
        geneTrees.add(makeNetwork("(B,((D,E),(C,(A,F))));"));
        geneTrees.add(makeNetwork("(D,(E,(B,(C,(A,F)))));"));
        geneTrees.add(makeNetwork("(E,(D,(B,(C,(A,F)))));"));
        geneTrees.add(makeNetwork("((D,E),(B,(C,(A,F))));"));
        geneTrees.add(makeNetwork("((B,(D,E)),(C,(A,F)));"));
        geneTrees.add(makeNetwork("(A,(F,(C,(B,(D,E)))));"));
        geneTrees.add(makeNetwork("(F,(A,(C,(B,(D,E)))));"));
        geneTrees.add(makeNetwork("((C,(B,(D,E))),(A,F));"));
        geneTrees.add(makeNetwork("(D,((B,F),((C,E),A)));"));
        geneTrees.add(makeNetwork("(B,(F,(D,((C,E),A))));"));
        geneTrees.add(makeNetwork("(F,(B,(D,((C,E),A))));"));
        geneTrees.add(makeNetwork("((B,F),(D,((C,E),A)));"));
        geneTrees.add(makeNetwork("((D,(B,F)),((C,E),A));"));
        geneTrees.add(makeNetwork("(C,(E,((D,(B,F)),A)));"));
        geneTrees.add(makeNetwork("(E,(C,((D,(B,F)),A)));"));
        geneTrees.add(makeNetwork("((C,E),((D,(B,F)),A));"));
        geneTrees.add(makeNetwork("(A,((D,(B,F)),(C,E)));"));
        geneTrees.add(makeNetwork("(B,((D,F),((C,E),A)));"));
        geneTrees.add(makeNetwork("(D,(F,(B,((C,E),A))));"));
        geneTrees.add(makeNetwork("(F,(D,(B,((C,E),A))));"));
        geneTrees.add(makeNetwork("((D,F),(B,((C,E),A)));"));
        geneTrees.add(makeNetwork("((B,(D,F)),((C,E),A));"));
        geneTrees.add(makeNetwork("(C,(E,((B,(D,F)),A)));"));
        geneTrees.add(makeNetwork("(E,(C,((B,(D,F)),A)));"));
        geneTrees.add(makeNetwork("((C,E),((B,(D,F)),A));"));
        geneTrees.add(makeNetwork("(A,((B,(D,F)),(C,E)));"));
        geneTrees.add(makeNetwork("(B,(D,((E,(C,F)),A)));"));
        geneTrees.add(makeNetwork("(D,(B,((E,(C,F)),A)));"));
        geneTrees.add(makeNetwork("((B,D),((E,(C,F)),A));"));
        geneTrees.add(makeNetwork("(E,((C,F),((B,D),A)));"));
        geneTrees.add(makeNetwork("(C,(F,(E,((B,D),A))));"));
        geneTrees.add(makeNetwork("(F,(C,(E,((B,D),A))));"));
        geneTrees.add(makeNetwork("((C,F),(E,((B,D),A)));"));
        geneTrees.add(makeNetwork("((E,(C,F)),((B,D),A));"));
        geneTrees.add(makeNetwork("(A,((B,D),(E,(C,F))));"));
        geneTrees.add(makeNetwork("(B,(D,((C,(E,F)),A)));"));
        geneTrees.add(makeNetwork("(D,(B,((C,(E,F)),A)));"));
        geneTrees.add(makeNetwork("((B,D),((C,(E,F)),A));"));
        geneTrees.add(makeNetwork("(C,((E,F),((B,D),A)));"));
        geneTrees.add(makeNetwork("(E,(F,(C,((B,D),A))));"));
        geneTrees.add(makeNetwork("(F,(E,(C,((B,D),A))));"));
        geneTrees.add(makeNetwork("((E,F),(C,((B,D),A)));"));
        geneTrees.add(makeNetwork("((C,(E,F)),((B,D),A));"));
        geneTrees.add(makeNetwork("(A,((B,D),(C,(E,F))));"));
        geneTrees.add(makeNetwork("(C,(E,(((B,D),F),A)));"));
        geneTrees.add(makeNetwork("(E,(C,(((B,D),F),A)));"));
        geneTrees.add(makeNetwork("((C,E),(((B,D),F),A));"));
        geneTrees.add(makeNetwork("(B,(D,(F,((C,E),A))));"));
        geneTrees.add(makeNetwork("(D,(B,(F,((C,E),A))));"));
        geneTrees.add(makeNetwork("((B,D),(F,((C,E),A)));"));
        geneTrees.add(makeNetwork("(F,((B,D),((C,E),A)));"));
        geneTrees.add(makeNetwork("(((B,D),F),((C,E),A));"));
        geneTrees.add(makeNetwork("(A,((C,E),((B,D),F)));"));
        geneTrees.add(makeNetwork("(B,(D,(((C,E),F),A)));"));
        geneTrees.add(makeNetwork("(D,(B,(((C,E),F),A)));"));
        geneTrees.add(makeNetwork("((B,D),(((C,E),F),A));"));
        geneTrees.add(makeNetwork("(C,(E,(F,((B,D),A))));"));
        geneTrees.add(makeNetwork("(E,(C,(F,((B,D),A))));"));
        geneTrees.add(makeNetwork("((C,E),(F,((B,D),A)));"));
        geneTrees.add(makeNetwork("(F,((C,E),((B,D),A)));"));
        geneTrees.add(makeNetwork("(((C,E),F),((B,D),A));"));
        geneTrees.add(makeNetwork("(A,((B,D),((C,E),F)));"));
        geneTrees.add(makeNetwork("(B,(D,((C,E),(A,F))));"));
        geneTrees.add(makeNetwork("(D,(B,((C,E),(A,F))));"));
        geneTrees.add(makeNetwork("((B,D),((C,E),(A,F)));"));
        geneTrees.add(makeNetwork("(C,(E,((B,D),(A,F))));"));
        geneTrees.add(makeNetwork("(E,(C,((B,D),(A,F))));"));
        geneTrees.add(makeNetwork("((C,E),((B,D),(A,F)));"));
        geneTrees.add(makeNetwork("(A,(F,((B,D),(C,E))));"));
        geneTrees.add(makeNetwork("(F,(A,((B,D),(C,E))));"));
        geneTrees.add(makeNetwork("(((B,D),(C,E)),(A,F));"));
        geneTrees.add(makeNetwork("(C,(((D,(B,F)),E),A));"));
        geneTrees.add(makeNetwork("(D,((B,F),(E,(C,A))));"));
        geneTrees.add(makeNetwork("(B,(F,(D,(E,(C,A)))));"));
        geneTrees.add(makeNetwork("(F,(B,(D,(E,(C,A)))));"));
        geneTrees.add(makeNetwork("((B,F),(D,(E,(C,A))));"));
        geneTrees.add(makeNetwork("((D,(B,F)),(E,(C,A)));"));
        geneTrees.add(makeNetwork("(E,((D,(B,F)),(C,A)));"));
        geneTrees.add(makeNetwork("(((D,(B,F)),E),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,((D,(B,F)),E)));"));
        geneTrees.add(makeNetwork("(C,(((B,(D,F)),E),A));"));
        geneTrees.add(makeNetwork("(B,((D,F),(E,(C,A))));"));
        geneTrees.add(makeNetwork("(D,(F,(B,(E,(C,A)))));"));
        geneTrees.add(makeNetwork("(F,(D,(B,(E,(C,A)))));"));
        geneTrees.add(makeNetwork("((D,F),(B,(E,(C,A))));"));
        geneTrees.add(makeNetwork("((B,(D,F)),(E,(C,A)));"));
        geneTrees.add(makeNetwork("(E,((B,(D,F)),(C,A)));"));
        geneTrees.add(makeNetwork("(((B,(D,F)),E),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,((B,(D,F)),E)));"));
        geneTrees.add(makeNetwork("(C,((E,((B,D),F)),A));"));
        geneTrees.add(makeNetwork("(E,(((B,D),F),(C,A)));"));
        geneTrees.add(makeNetwork("(B,(D,(F,(E,(C,A)))));"));
        geneTrees.add(makeNetwork("(D,(B,(F,(E,(C,A)))));"));
        geneTrees.add(makeNetwork("((B,D),(F,(E,(C,A))));"));
        geneTrees.add(makeNetwork("(F,((B,D),(E,(C,A))));"));
        geneTrees.add(makeNetwork("(((B,D),F),(E,(C,A)));"));
        geneTrees.add(makeNetwork("((E,((B,D),F)),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,(E,((B,D),F))));"));
        geneTrees.add(makeNetwork("(C,(((B,D),(E,F)),A));"));
        geneTrees.add(makeNetwork("(B,(D,((E,F),(C,A))));"));
        geneTrees.add(makeNetwork("(D,(B,((E,F),(C,A))));"));
        geneTrees.add(makeNetwork("((B,D),((E,F),(C,A)));"));
        geneTrees.add(makeNetwork("(E,(F,((B,D),(C,A))));"));
        geneTrees.add(makeNetwork("(F,(E,((B,D),(C,A))));"));
        geneTrees.add(makeNetwork("((E,F),((B,D),(C,A)));"));
        geneTrees.add(makeNetwork("(((B,D),(E,F)),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,((B,D),(E,F))));"));
        geneTrees.add(makeNetwork("(B,(D,(E,((C,F),A))));"));
        geneTrees.add(makeNetwork("(D,(B,(E,((C,F),A))));"));
        geneTrees.add(makeNetwork("((B,D),(E,((C,F),A)));"));
        geneTrees.add(makeNetwork("(E,((B,D),((C,F),A)));"));
        geneTrees.add(makeNetwork("(((B,D),E),((C,F),A));"));
        geneTrees.add(makeNetwork("(C,(F,(((B,D),E),A)));"));
        geneTrees.add(makeNetwork("(F,(C,(((B,D),E),A)));"));
        geneTrees.add(makeNetwork("((C,F),(((B,D),E),A));"));
        geneTrees.add(makeNetwork("(A,(((B,D),E),(C,F)));"));
        geneTrees.add(makeNetwork("(C,((((B,D),E),F),A));"));
        geneTrees.add(makeNetwork("(B,(D,(E,(F,(C,A)))));"));
        geneTrees.add(makeNetwork("(D,(B,(E,(F,(C,A)))));"));
        geneTrees.add(makeNetwork("((B,D),(E,(F,(C,A))));"));
        geneTrees.add(makeNetwork("(E,((B,D),(F,(C,A))));"));
        geneTrees.add(makeNetwork("(((B,D),E),(F,(C,A)));"));
        geneTrees.add(makeNetwork("(F,(((B,D),E),(C,A)));"));
        geneTrees.add(makeNetwork("((((B,D),E),F),(C,A));"));
        geneTrees.add(makeNetwork("(A,(C,(((B,D),E),F)));"));
        geneTrees.add(makeNetwork("(C,(((B,D),E),(A,F)));"));
        geneTrees.add(makeNetwork("(B,(D,(E,(C,(A,F)))));"));
        geneTrees.add(makeNetwork("(D,(B,(E,(C,(A,F)))));"));
        geneTrees.add(makeNetwork("((B,D),(E,(C,(A,F))));"));
        geneTrees.add(makeNetwork("(E,((B,D),(C,(A,F))));"));
        geneTrees.add(makeNetwork("(((B,D),E),(C,(A,F)));"));
        geneTrees.add(makeNetwork("(A,(F,(C,((B,D),E))));"));
        geneTrees.add(makeNetwork("(F,(A,(C,((B,D),E))));"));
        geneTrees.add(makeNetwork("((C,((B,D),E)),(A,F));"));
        geneTrees.add(makeNetwork("(C,((D,(B,F)),(A,E)));"));
        geneTrees.add(makeNetwork("(D,((B,F),(C,(A,E))));"));
        geneTrees.add(makeNetwork("(B,(F,(D,(C,(A,E)))));"));
        geneTrees.add(makeNetwork("(F,(B,(D,(C,(A,E)))));"));
        geneTrees.add(makeNetwork("((B,F),(D,(C,(A,E))));"));
        geneTrees.add(makeNetwork("((D,(B,F)),(C,(A,E)));"));
        geneTrees.add(makeNetwork("(A,(E,(C,(D,(B,F)))));"));
        geneTrees.add(makeNetwork("(E,(A,(C,(D,(B,F)))));"));
        geneTrees.add(makeNetwork("((C,(D,(B,F))),(A,E));"));
        geneTrees.add(makeNetwork("(C,((B,(D,F)),(A,E)));"));
        geneTrees.add(makeNetwork("(B,((D,F),(C,(A,E))));"));
        geneTrees.add(makeNetwork("(D,(F,(B,(C,(A,E)))));"));
        geneTrees.add(makeNetwork("(F,(D,(B,(C,(A,E)))));"));
        geneTrees.add(makeNetwork("((D,F),(B,(C,(A,E))));"));
        geneTrees.add(makeNetwork("((B,(D,F)),(C,(A,E)));"));
        geneTrees.add(makeNetwork("(A,(E,(C,(B,(D,F)))));"));
        geneTrees.add(makeNetwork("(E,(A,(C,(B,(D,F)))));"));
        geneTrees.add(makeNetwork("((C,(B,(D,F))),(A,E));"));
        geneTrees.add(makeNetwork("(B,(D,((C,F),(A,E))));"));
        geneTrees.add(makeNetwork("(D,(B,((C,F),(A,E))));"));
        geneTrees.add(makeNetwork("((B,D),((C,F),(A,E)));"));
        geneTrees.add(makeNetwork("(C,(F,((B,D),(A,E))));"));
        geneTrees.add(makeNetwork("(F,(C,((B,D),(A,E))));"));
        geneTrees.add(makeNetwork("((C,F),((B,D),(A,E)));"));
        geneTrees.add(makeNetwork("(A,(E,((B,D),(C,F))));"));
        geneTrees.add(makeNetwork("(E,(A,((B,D),(C,F))));"));
        geneTrees.add(makeNetwork("(((B,D),(C,F)),(A,E));"));
        geneTrees.add(makeNetwork("(C,(((B,D),F),(A,E)));"));
        geneTrees.add(makeNetwork("(B,(D,(F,(C,(A,E)))));"));
        geneTrees.add(makeNetwork("(D,(B,(F,(C,(A,E)))));"));
        geneTrees.add(makeNetwork("((B,D),(F,(C,(A,E))));"));
        geneTrees.add(makeNetwork("(F,((B,D),(C,(A,E))));"));
        geneTrees.add(makeNetwork("(((B,D),F),(C,(A,E)));"));
        geneTrees.add(makeNetwork("(A,(E,(C,((B,D),F))));"));
        geneTrees.add(makeNetwork("(E,(A,(C,((B,D),F))));"));
        geneTrees.add(makeNetwork("((C,((B,D),F)),(A,E));"));
        geneTrees.add(makeNetwork("(C,((B,D),(E,(A,F))));"));
        geneTrees.add(makeNetwork("(B,(D,(C,(E,(A,F)))));"));
        geneTrees.add(makeNetwork("(D,(B,(C,(E,(A,F)))));"));
        geneTrees.add(makeNetwork("((B,D),(C,(E,(A,F))));"));
        geneTrees.add(makeNetwork("(E,((A,F),(C,(B,D))));"));
        geneTrees.add(makeNetwork("(A,(F,(E,(C,(B,D)))));"));
        geneTrees.add(makeNetwork("(F,(A,(E,(C,(B,D)))));"));
        geneTrees.add(makeNetwork("((A,F),(E,(C,(B,D))));"));
        geneTrees.add(makeNetwork("((C,(B,D)),(E,(A,F)));"));
        geneTrees.add(makeNetwork("(C,((B,D),(A,(E,F))));"));
        geneTrees.add(makeNetwork("(B,(D,(C,(A,(E,F)))));"));
        geneTrees.add(makeNetwork("(D,(B,(C,(A,(E,F)))));"));
        geneTrees.add(makeNetwork("((B,D),(C,(A,(E,F))));"));
        geneTrees.add(makeNetwork("(A,((E,F),(C,(B,D))));"));
        geneTrees.add(makeNetwork("(E,(F,(A,(C,(B,D)))));"));
        geneTrees.add(makeNetwork("(F,(E,(A,(C,(B,D)))));"));
        geneTrees.add(makeNetwork("((E,F),(A,(C,(B,D))));"));
        geneTrees.add(makeNetwork("((C,(B,D)),(A,(E,F)));"));
        geneTrees.add(makeNetwork("(A,(E,((C,(B,D)),F)));"));
        geneTrees.add(makeNetwork("(E,(A,((C,(B,D)),F)));"));
        geneTrees.add(makeNetwork("(C,((B,D),(F,(A,E))));"));
        geneTrees.add(makeNetwork("(B,(D,(C,(F,(A,E)))));"));
        geneTrees.add(makeNetwork("(D,(B,(C,(F,(A,E)))));"));
        geneTrees.add(makeNetwork("((B,D),(C,(F,(A,E))));"));
        geneTrees.add(makeNetwork("((C,(B,D)),(F,(A,E)));"));
        geneTrees.add(makeNetwork("(F,((C,(B,D)),(A,E)));"));
        geneTrees.add(makeNetwork("((A,E),((C,(B,D)),F));"));
        geneTrees.add(makeNetwork("(B,((D,(E,(C,F))),A));"));
        geneTrees.add(makeNetwork("(D,((E,(C,F)),(B,A)));"));
        geneTrees.add(makeNetwork("(E,((C,F),(D,(B,A))));"));
        geneTrees.add(makeNetwork("(C,(F,(E,(D,(B,A)))));"));
        geneTrees.add(makeNetwork("(F,(C,(E,(D,(B,A)))));"));
        geneTrees.add(makeNetwork("((C,F),(E,(D,(B,A))));"));
        geneTrees.add(makeNetwork("((E,(C,F)),(D,(B,A)));"));
        geneTrees.add(makeNetwork("((D,(E,(C,F))),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,(D,(E,(C,F)))));"));
        geneTrees.add(makeNetwork("(B,((D,(C,(E,F))),A));"));
        geneTrees.add(makeNetwork("(D,((C,(E,F)),(B,A)));"));
        geneTrees.add(makeNetwork("(C,((E,F),(D,(B,A))));"));
        geneTrees.add(makeNetwork("(E,(F,(C,(D,(B,A)))));"));
        geneTrees.add(makeNetwork("(F,(E,(C,(D,(B,A)))));"));
        geneTrees.add(makeNetwork("((E,F),(C,(D,(B,A))));"));
        geneTrees.add(makeNetwork("((C,(E,F)),(D,(B,A)));"));
        geneTrees.add(makeNetwork("((D,(C,(E,F))),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,(D,(C,(E,F)))));"));
        geneTrees.add(makeNetwork("(B,(((C,E),(D,F)),A));"));
        geneTrees.add(makeNetwork("(C,(E,((D,F),(B,A))));"));
        geneTrees.add(makeNetwork("(E,(C,((D,F),(B,A))));"));
        geneTrees.add(makeNetwork("((C,E),((D,F),(B,A)));"));
        geneTrees.add(makeNetwork("(D,(F,((C,E),(B,A))));"));
        geneTrees.add(makeNetwork("(F,(D,((C,E),(B,A))));"));
        geneTrees.add(makeNetwork("((D,F),((C,E),(B,A)));"));
        geneTrees.add(makeNetwork("(((C,E),(D,F)),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,((C,E),(D,F))));"));
        geneTrees.add(makeNetwork("(B,((D,((C,E),F)),A));"));
        geneTrees.add(makeNetwork("(D,(((C,E),F),(B,A)));"));
        geneTrees.add(makeNetwork("(C,(E,(F,(D,(B,A)))));"));
        geneTrees.add(makeNetwork("(E,(C,(F,(D,(B,A)))));"));
        geneTrees.add(makeNetwork("((C,E),(F,(D,(B,A))));"));
        geneTrees.add(makeNetwork("(F,((C,E),(D,(B,A))));"));
        geneTrees.add(makeNetwork("(((C,E),F),(D,(B,A)));"));
        geneTrees.add(makeNetwork("((D,((C,E),F)),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,(D,((C,E),F))));"));
        geneTrees.add(makeNetwork("(D,((C,E),((B,F),A)));"));
        geneTrees.add(makeNetwork("(C,(E,(D,((B,F),A))));"));
        geneTrees.add(makeNetwork("(E,(C,(D,((B,F),A))));"));
        geneTrees.add(makeNetwork("((C,E),(D,((B,F),A)));"));
        geneTrees.add(makeNetwork("((D,(C,E)),((B,F),A));"));
        geneTrees.add(makeNetwork("(B,(F,((D,(C,E)),A)));"));
        geneTrees.add(makeNetwork("(F,(B,((D,(C,E)),A)));"));
        geneTrees.add(makeNetwork("((B,F),((D,(C,E)),A));"));
        geneTrees.add(makeNetwork("(A,((D,(C,E)),(B,F)));"));
        geneTrees.add(makeNetwork("(B,(((D,(C,E)),F),A));"));
        geneTrees.add(makeNetwork("(D,((C,E),(F,(B,A))));"));
        geneTrees.add(makeNetwork("(C,(E,(D,(F,(B,A)))));"));
        geneTrees.add(makeNetwork("(E,(C,(D,(F,(B,A)))));"));
        geneTrees.add(makeNetwork("((C,E),(D,(F,(B,A))));"));
        geneTrees.add(makeNetwork("((D,(C,E)),(F,(B,A)));"));
        geneTrees.add(makeNetwork("(F,((D,(C,E)),(B,A)));"));
        geneTrees.add(makeNetwork("(((D,(C,E)),F),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,((D,(C,E)),F)));"));
        geneTrees.add(makeNetwork("(B,((D,(C,E)),(A,F)));"));
        geneTrees.add(makeNetwork("(D,((C,E),(B,(A,F))));"));
        geneTrees.add(makeNetwork("(C,(E,(D,(B,(A,F)))));"));
        geneTrees.add(makeNetwork("(E,(C,(D,(B,(A,F)))));"));
        geneTrees.add(makeNetwork("((C,E),(D,(B,(A,F))));"));
        geneTrees.add(makeNetwork("((D,(C,E)),(B,(A,F)));"));
        geneTrees.add(makeNetwork("(A,(F,(B,(D,(C,E)))));"));
        geneTrees.add(makeNetwork("(F,(A,(B,(D,(C,E)))));"));
        geneTrees.add(makeNetwork("((B,(D,(C,E))),(A,F));"));
        geneTrees.add(makeNetwork("(B,((C,(E,(D,F))),A));"));
        geneTrees.add(makeNetwork("(C,((E,(D,F)),(B,A)));"));
        geneTrees.add(makeNetwork("(E,((D,F),(C,(B,A))));"));
        geneTrees.add(makeNetwork("(D,(F,(E,(C,(B,A)))));"));
        geneTrees.add(makeNetwork("(F,(D,(E,(C,(B,A)))));"));
        geneTrees.add(makeNetwork("((D,F),(E,(C,(B,A))));"));
        geneTrees.add(makeNetwork("((E,(D,F)),(C,(B,A)));"));
        geneTrees.add(makeNetwork("((C,(E,(D,F))),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,(C,(E,(D,F)))));"));
        geneTrees.add(makeNetwork("(B,((C,(D,(E,F))),A));"));
        geneTrees.add(makeNetwork("(C,((D,(E,F)),(B,A)));"));
        geneTrees.add(makeNetwork("(D,((E,F),(C,(B,A))));"));
        geneTrees.add(makeNetwork("(E,(F,(D,(C,(B,A)))));"));
        geneTrees.add(makeNetwork("(F,(E,(D,(C,(B,A)))));"));
        geneTrees.add(makeNetwork("((E,F),(D,(C,(B,A))));"));
        geneTrees.add(makeNetwork("((D,(E,F)),(C,(B,A)));"));
        geneTrees.add(makeNetwork("((C,(D,(E,F))),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,(C,(D,(E,F)))));"));
        geneTrees.add(makeNetwork("(B,(((D,E),(C,F)),A));"));
        geneTrees.add(makeNetwork("(D,(E,((C,F),(B,A))));"));
        geneTrees.add(makeNetwork("(E,(D,((C,F),(B,A))));"));
        geneTrees.add(makeNetwork("((D,E),((C,F),(B,A)));"));
        geneTrees.add(makeNetwork("(C,(F,((D,E),(B,A))));"));
        geneTrees.add(makeNetwork("(F,(C,((D,E),(B,A))));"));
        geneTrees.add(makeNetwork("((C,F),((D,E),(B,A)));"));
        geneTrees.add(makeNetwork("(((D,E),(C,F)),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,((D,E),(C,F))));"));
        geneTrees.add(makeNetwork("(B,((C,((D,E),F)),A));"));
        geneTrees.add(makeNetwork("(C,(((D,E),F),(B,A)));"));
        geneTrees.add(makeNetwork("(D,(E,(F,(C,(B,A)))));"));
        geneTrees.add(makeNetwork("(E,(D,(F,(C,(B,A)))));"));
        geneTrees.add(makeNetwork("((D,E),(F,(C,(B,A))));"));
        geneTrees.add(makeNetwork("(F,((D,E),(C,(B,A))));"));
        geneTrees.add(makeNetwork("(((D,E),F),(C,(B,A)));"));
        geneTrees.add(makeNetwork("((C,((D,E),F)),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,(C,((D,E),F))));"));
        geneTrees.add(makeNetwork("(C,((D,E),((B,F),A)));"));
        geneTrees.add(makeNetwork("(D,(E,(C,((B,F),A))));"));
        geneTrees.add(makeNetwork("(E,(D,(C,((B,F),A))));"));
        geneTrees.add(makeNetwork("((D,E),(C,((B,F),A)));"));
        geneTrees.add(makeNetwork("((C,(D,E)),((B,F),A));"));
        geneTrees.add(makeNetwork("(B,(F,((C,(D,E)),A)));"));
        geneTrees.add(makeNetwork("(F,(B,((C,(D,E)),A)));"));
        geneTrees.add(makeNetwork("((B,F),((C,(D,E)),A));"));
        geneTrees.add(makeNetwork("(A,((C,(D,E)),(B,F)));"));
        geneTrees.add(makeNetwork("(B,(((C,(D,E)),F),A));"));
        geneTrees.add(makeNetwork("(C,((D,E),(F,(B,A))));"));
        geneTrees.add(makeNetwork("(D,(E,(C,(F,(B,A)))));"));
        geneTrees.add(makeNetwork("(E,(D,(C,(F,(B,A)))));"));
        geneTrees.add(makeNetwork("((D,E),(C,(F,(B,A))));"));
        geneTrees.add(makeNetwork("((C,(D,E)),(F,(B,A)));"));
        geneTrees.add(makeNetwork("(F,((C,(D,E)),(B,A)));"));
        geneTrees.add(makeNetwork("(((C,(D,E)),F),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,((C,(D,E)),F)));"));
        geneTrees.add(makeNetwork("(B,((C,(D,E)),(A,F)));"));
        geneTrees.add(makeNetwork("(C,((D,E),(B,(A,F))));"));
        geneTrees.add(makeNetwork("(D,(E,(C,(B,(A,F)))));"));
        geneTrees.add(makeNetwork("(E,(D,(C,(B,(A,F)))));"));
        geneTrees.add(makeNetwork("((D,E),(C,(B,(A,F))));"));
        geneTrees.add(makeNetwork("((C,(D,E)),(B,(A,F)));"));
        geneTrees.add(makeNetwork("(A,(F,(B,(C,(D,E)))));"));
        geneTrees.add(makeNetwork("(F,(A,(B,(C,(D,E)))));"));
        geneTrees.add(makeNetwork("((B,(C,(D,E))),(A,F));"));
        geneTrees.add(makeNetwork("(D,((C,F),((B,E),A)));"));
        geneTrees.add(makeNetwork("(C,(F,(D,((B,E),A))));"));
        geneTrees.add(makeNetwork("(F,(C,(D,((B,E),A))));"));
        geneTrees.add(makeNetwork("((C,F),(D,((B,E),A)));"));
        geneTrees.add(makeNetwork("((D,(C,F)),((B,E),A));"));
        geneTrees.add(makeNetwork("(B,(E,((D,(C,F)),A)));"));
        geneTrees.add(makeNetwork("(E,(B,((D,(C,F)),A)));"));
        geneTrees.add(makeNetwork("((B,E),((D,(C,F)),A));"));
        geneTrees.add(makeNetwork("(A,((D,(C,F)),(B,E)));"));
        geneTrees.add(makeNetwork("(C,((D,F),((B,E),A)));"));
        geneTrees.add(makeNetwork("(D,(F,(C,((B,E),A))));"));
        geneTrees.add(makeNetwork("(F,(D,(C,((B,E),A))));"));
        geneTrees.add(makeNetwork("((D,F),(C,((B,E),A)));"));
        geneTrees.add(makeNetwork("((C,(D,F)),((B,E),A));"));
        geneTrees.add(makeNetwork("(B,(E,((C,(D,F)),A)));"));
        geneTrees.add(makeNetwork("(E,(B,((C,(D,F)),A)));"));
        geneTrees.add(makeNetwork("((B,E),((C,(D,F)),A));"));
        geneTrees.add(makeNetwork("(A,((C,(D,F)),(B,E)));"));
        geneTrees.add(makeNetwork("(C,(D,((E,(B,F)),A)));"));
        geneTrees.add(makeNetwork("(D,(C,((E,(B,F)),A)));"));
        geneTrees.add(makeNetwork("((C,D),((E,(B,F)),A));"));
        geneTrees.add(makeNetwork("(E,((B,F),((C,D),A)));"));
        geneTrees.add(makeNetwork("(B,(F,(E,((C,D),A))));"));
        geneTrees.add(makeNetwork("(F,(B,(E,((C,D),A))));"));
        geneTrees.add(makeNetwork("((B,F),(E,((C,D),A)));"));
        geneTrees.add(makeNetwork("((E,(B,F)),((C,D),A));"));
        geneTrees.add(makeNetwork("(A,((C,D),(E,(B,F))));"));
        geneTrees.add(makeNetwork("(C,(D,((B,(E,F)),A)));"));
        geneTrees.add(makeNetwork("(D,(C,((B,(E,F)),A)));"));
        geneTrees.add(makeNetwork("((C,D),((B,(E,F)),A));"));
        geneTrees.add(makeNetwork("(B,((E,F),((C,D),A)));"));
        geneTrees.add(makeNetwork("(E,(F,(B,((C,D),A))));"));
        geneTrees.add(makeNetwork("(F,(E,(B,((C,D),A))));"));
        geneTrees.add(makeNetwork("((E,F),(B,((C,D),A)));"));
        geneTrees.add(makeNetwork("((B,(E,F)),((C,D),A));"));
        geneTrees.add(makeNetwork("(A,((C,D),(B,(E,F))));"));
        geneTrees.add(makeNetwork("(B,(E,(((C,D),F),A)));"));
        geneTrees.add(makeNetwork("(E,(B,(((C,D),F),A)));"));
        geneTrees.add(makeNetwork("((B,E),(((C,D),F),A));"));
        geneTrees.add(makeNetwork("(C,(D,(F,((B,E),A))));"));
        geneTrees.add(makeNetwork("(D,(C,(F,((B,E),A))));"));
        geneTrees.add(makeNetwork("((C,D),(F,((B,E),A)));"));
        geneTrees.add(makeNetwork("(F,((C,D),((B,E),A)));"));
        geneTrees.add(makeNetwork("(((C,D),F),((B,E),A));"));
        geneTrees.add(makeNetwork("(A,((B,E),((C,D),F)));"));
        geneTrees.add(makeNetwork("(C,(D,(((B,E),F),A)));"));
        geneTrees.add(makeNetwork("(D,(C,(((B,E),F),A)));"));
        geneTrees.add(makeNetwork("((C,D),(((B,E),F),A));"));
        geneTrees.add(makeNetwork("(B,(E,(F,((C,D),A))));"));
        geneTrees.add(makeNetwork("(E,(B,(F,((C,D),A))));"));
        geneTrees.add(makeNetwork("((B,E),(F,((C,D),A)));"));
        geneTrees.add(makeNetwork("(F,((B,E),((C,D),A)));"));
        geneTrees.add(makeNetwork("(((B,E),F),((C,D),A));"));
        geneTrees.add(makeNetwork("(A,((C,D),((B,E),F)));"));
        geneTrees.add(makeNetwork("(C,(D,((B,E),(A,F))));"));
        geneTrees.add(makeNetwork("(D,(C,((B,E),(A,F))));"));
        geneTrees.add(makeNetwork("((C,D),((B,E),(A,F)));"));
        geneTrees.add(makeNetwork("(B,(E,((C,D),(A,F))));"));
        geneTrees.add(makeNetwork("(E,(B,((C,D),(A,F))));"));
        geneTrees.add(makeNetwork("((B,E),((C,D),(A,F)));"));
        geneTrees.add(makeNetwork("(A,(F,((C,D),(B,E))));"));
        geneTrees.add(makeNetwork("(F,(A,((C,D),(B,E))));"));
        geneTrees.add(makeNetwork("(((C,D),(B,E)),(A,F));"));
        geneTrees.add(makeNetwork("(B,(((D,(C,F)),E),A));"));
        geneTrees.add(makeNetwork("(D,((C,F),(E,(B,A))));"));
        geneTrees.add(makeNetwork("(C,(F,(D,(E,(B,A)))));"));
        geneTrees.add(makeNetwork("(F,(C,(D,(E,(B,A)))));"));
        geneTrees.add(makeNetwork("((C,F),(D,(E,(B,A))));"));
        geneTrees.add(makeNetwork("((D,(C,F)),(E,(B,A)));"));
        geneTrees.add(makeNetwork("(E,((D,(C,F)),(B,A)));"));
        geneTrees.add(makeNetwork("(((D,(C,F)),E),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,((D,(C,F)),E)));"));
        geneTrees.add(makeNetwork("(B,(((C,(D,F)),E),A));"));
        geneTrees.add(makeNetwork("(C,((D,F),(E,(B,A))));"));
        geneTrees.add(makeNetwork("(D,(F,(C,(E,(B,A)))));"));
        geneTrees.add(makeNetwork("(F,(D,(C,(E,(B,A)))));"));
        geneTrees.add(makeNetwork("((D,F),(C,(E,(B,A))));"));
        geneTrees.add(makeNetwork("((C,(D,F)),(E,(B,A)));"));
        geneTrees.add(makeNetwork("(E,((C,(D,F)),(B,A)));"));
        geneTrees.add(makeNetwork("(((C,(D,F)),E),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,((C,(D,F)),E)));"));
        geneTrees.add(makeNetwork("(B,((E,((C,D),F)),A));"));
        geneTrees.add(makeNetwork("(E,(((C,D),F),(B,A)));"));
        geneTrees.add(makeNetwork("(C,(D,(F,(E,(B,A)))));"));
        geneTrees.add(makeNetwork("(D,(C,(F,(E,(B,A)))));"));
        geneTrees.add(makeNetwork("((C,D),(F,(E,(B,A))));"));
        geneTrees.add(makeNetwork("(F,((C,D),(E,(B,A))));"));
        geneTrees.add(makeNetwork("(((C,D),F),(E,(B,A)));"));
        geneTrees.add(makeNetwork("((E,((C,D),F)),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,(E,((C,D),F))));"));
        geneTrees.add(makeNetwork("(B,(((C,D),(E,F)),A));"));
        geneTrees.add(makeNetwork("(C,(D,((E,F),(B,A))));"));
        geneTrees.add(makeNetwork("(D,(C,((E,F),(B,A))));"));
        geneTrees.add(makeNetwork("((C,D),((E,F),(B,A)));"));
        geneTrees.add(makeNetwork("(E,(F,((C,D),(B,A))));"));
        geneTrees.add(makeNetwork("(F,(E,((C,D),(B,A))));"));
        geneTrees.add(makeNetwork("((E,F),((C,D),(B,A)));"));
        geneTrees.add(makeNetwork("(((C,D),(E,F)),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,((C,D),(E,F))));"));
        geneTrees.add(makeNetwork("(C,(D,(E,((B,F),A))));"));
        geneTrees.add(makeNetwork("(D,(C,(E,((B,F),A))));"));
        geneTrees.add(makeNetwork("((C,D),(E,((B,F),A)));"));
        geneTrees.add(makeNetwork("(E,((C,D),((B,F),A)));"));
        geneTrees.add(makeNetwork("(((C,D),E),((B,F),A));"));
        geneTrees.add(makeNetwork("(B,(F,(((C,D),E),A)));"));
        geneTrees.add(makeNetwork("(F,(B,(((C,D),E),A)));"));
        geneTrees.add(makeNetwork("((B,F),(((C,D),E),A));"));
        geneTrees.add(makeNetwork("(A,(((C,D),E),(B,F)));"));
        geneTrees.add(makeNetwork("(B,((((C,D),E),F),A));"));
        geneTrees.add(makeNetwork("(C,(D,(E,(F,(B,A)))));"));
        geneTrees.add(makeNetwork("(D,(C,(E,(F,(B,A)))));"));
        geneTrees.add(makeNetwork("((C,D),(E,(F,(B,A))));"));
        geneTrees.add(makeNetwork("(E,((C,D),(F,(B,A))));"));
        geneTrees.add(makeNetwork("(((C,D),E),(F,(B,A)));"));
        geneTrees.add(makeNetwork("(F,(((C,D),E),(B,A)));"));
        geneTrees.add(makeNetwork("((((C,D),E),F),(B,A));"));
        geneTrees.add(makeNetwork("(A,(B,(((C,D),E),F)));"));
        geneTrees.add(makeNetwork("(B,(((C,D),E),(A,F)));"));
        geneTrees.add(makeNetwork("(C,(D,(E,(B,(A,F)))));"));
        geneTrees.add(makeNetwork("(D,(C,(E,(B,(A,F)))));"));
        geneTrees.add(makeNetwork("((C,D),(E,(B,(A,F))));"));
        geneTrees.add(makeNetwork("(E,((C,D),(B,(A,F))));"));
        geneTrees.add(makeNetwork("(((C,D),E),(B,(A,F)));"));
        geneTrees.add(makeNetwork("(A,(F,(B,((C,D),E))));"));
        geneTrees.add(makeNetwork("(F,(A,(B,((C,D),E))));"));
        geneTrees.add(makeNetwork("((B,((C,D),E)),(A,F));"));
        geneTrees.add(makeNetwork("(B,((D,(C,F)),(A,E)));"));
        geneTrees.add(makeNetwork("(D,((C,F),(B,(A,E))));"));
        geneTrees.add(makeNetwork("(C,(F,(D,(B,(A,E)))));"));
        geneTrees.add(makeNetwork("(F,(C,(D,(B,(A,E)))));"));
        geneTrees.add(makeNetwork("((C,F),(D,(B,(A,E))));"));
        geneTrees.add(makeNetwork("((D,(C,F)),(B,(A,E)));"));
        geneTrees.add(makeNetwork("(A,(E,(B,(D,(C,F)))));"));
        geneTrees.add(makeNetwork("(E,(A,(B,(D,(C,F)))));"));
        geneTrees.add(makeNetwork("((B,(D,(C,F))),(A,E));"));
        geneTrees.add(makeNetwork("(B,((C,(D,F)),(A,E)));"));
        geneTrees.add(makeNetwork("(C,((D,F),(B,(A,E))));"));
        geneTrees.add(makeNetwork("(D,(F,(C,(B,(A,E)))));"));
        geneTrees.add(makeNetwork("(F,(D,(C,(B,(A,E)))));"));
        geneTrees.add(makeNetwork("((D,F),(C,(B,(A,E))));"));
        geneTrees.add(makeNetwork("((C,(D,F)),(B,(A,E)));"));
        geneTrees.add(makeNetwork("(A,(E,(B,(C,(D,F)))));"));
        geneTrees.add(makeNetwork("(E,(A,(B,(C,(D,F)))));"));
        geneTrees.add(makeNetwork("((B,(C,(D,F))),(A,E));"));
        geneTrees.add(makeNetwork("(C,(D,((B,F),(A,E))));"));
        geneTrees.add(makeNetwork("(D,(C,((B,F),(A,E))));"));
        geneTrees.add(makeNetwork("((C,D),((B,F),(A,E)));"));
        geneTrees.add(makeNetwork("(B,(F,((C,D),(A,E))));"));
        geneTrees.add(makeNetwork("(F,(B,((C,D),(A,E))));"));
        geneTrees.add(makeNetwork("((B,F),((C,D),(A,E)));"));
        geneTrees.add(makeNetwork("(A,(E,((C,D),(B,F))));"));
        geneTrees.add(makeNetwork("(E,(A,((C,D),(B,F))));"));
        geneTrees.add(makeNetwork("(((C,D),(B,F)),(A,E));"));
        geneTrees.add(makeNetwork("(B,(((C,D),F),(A,E)));"));
        geneTrees.add(makeNetwork("(C,(D,(F,(B,(A,E)))));"));
        geneTrees.add(makeNetwork("(D,(C,(F,(B,(A,E)))));"));
        geneTrees.add(makeNetwork("((C,D),(F,(B,(A,E))));"));
        geneTrees.add(makeNetwork("(F,((C,D),(B,(A,E))));"));
        geneTrees.add(makeNetwork("(((C,D),F),(B,(A,E)));"));
        geneTrees.add(makeNetwork("(A,(E,(B,((C,D),F))));"));
        geneTrees.add(makeNetwork("(E,(A,(B,((C,D),F))));"));
        geneTrees.add(makeNetwork("((B,((C,D),F)),(A,E));"));
        geneTrees.add(makeNetwork("(B,((C,D),(E,(A,F))));"));
        geneTrees.add(makeNetwork("(C,(D,(B,(E,(A,F)))));"));
        geneTrees.add(makeNetwork("(D,(C,(B,(E,(A,F)))));"));
        geneTrees.add(makeNetwork("((C,D),(B,(E,(A,F))));"));
        geneTrees.add(makeNetwork("(E,((A,F),(B,(C,D))));"));
        geneTrees.add(makeNetwork("(A,(F,(E,(B,(C,D)))));"));
        geneTrees.add(makeNetwork("(F,(A,(E,(B,(C,D)))));"));
        geneTrees.add(makeNetwork("((A,F),(E,(B,(C,D))));"));
        geneTrees.add(makeNetwork("((B,(C,D)),(E,(A,F)));"));
        geneTrees.add(makeNetwork("(B,((C,D),(A,(E,F))));"));
        geneTrees.add(makeNetwork("(C,(D,(B,(A,(E,F)))));"));
        geneTrees.add(makeNetwork("(D,(C,(B,(A,(E,F)))));"));
        geneTrees.add(makeNetwork("((C,D),(B,(A,(E,F))));"));
        geneTrees.add(makeNetwork("(A,((E,F),(B,(C,D))));"));
        geneTrees.add(makeNetwork("(E,(F,(A,(B,(C,D)))));"));
        geneTrees.add(makeNetwork("(F,(E,(A,(B,(C,D)))));"));
        geneTrees.add(makeNetwork("((E,F),(A,(B,(C,D))));"));
        geneTrees.add(makeNetwork("((B,(C,D)),(A,(E,F)));"));
        geneTrees.add(makeNetwork("(A,(E,((B,(C,D)),F)));"));
        geneTrees.add(makeNetwork("(E,(A,((B,(C,D)),F)));"));
        geneTrees.add(makeNetwork("(B,((C,D),(F,(A,E))));"));
        geneTrees.add(makeNetwork("(C,(D,(B,(F,(A,E)))));"));
        geneTrees.add(makeNetwork("(D,(C,(B,(F,(A,E)))));"));
        geneTrees.add(makeNetwork("((C,D),(B,(F,(A,E))));"));
        geneTrees.add(makeNetwork("((B,(C,D)),(F,(A,E)));"));
        geneTrees.add(makeNetwork("(F,((B,(C,D)),(A,E)));"));
        geneTrees.add(makeNetwork("((A,E),((B,(C,D)),F));"));
        geneTrees.add(makeNetwork("(C,((E,(B,F)),(A,D)));"));
        geneTrees.add(makeNetwork("(E,((B,F),(C,(A,D))));"));
        geneTrees.add(makeNetwork("(B,(F,(E,(C,(A,D)))));"));
        geneTrees.add(makeNetwork("(F,(B,(E,(C,(A,D)))));"));
        geneTrees.add(makeNetwork("((B,F),(E,(C,(A,D))));"));
        geneTrees.add(makeNetwork("((E,(B,F)),(C,(A,D)));"));
        geneTrees.add(makeNetwork("(A,(D,(C,(E,(B,F)))));"));
        geneTrees.add(makeNetwork("(D,(A,(C,(E,(B,F)))));"));
        geneTrees.add(makeNetwork("((C,(E,(B,F))),(A,D));"));
        geneTrees.add(makeNetwork("(C,((B,(E,F)),(A,D)));"));
        geneTrees.add(makeNetwork("(B,((E,F),(C,(A,D))));"));
        geneTrees.add(makeNetwork("(E,(F,(B,(C,(A,D)))));"));
        geneTrees.add(makeNetwork("(F,(E,(B,(C,(A,D)))));"));
        geneTrees.add(makeNetwork("((E,F),(B,(C,(A,D))));"));
        geneTrees.add(makeNetwork("((B,(E,F)),(C,(A,D)));"));
        geneTrees.add(makeNetwork("(A,(D,(C,(B,(E,F)))));"));
        geneTrees.add(makeNetwork("(D,(A,(C,(B,(E,F)))));"));
        geneTrees.add(makeNetwork("((C,(B,(E,F))),(A,D));"));
        geneTrees.add(makeNetwork("(B,(E,((C,F),(A,D))));"));
        geneTrees.add(makeNetwork("(E,(B,((C,F),(A,D))));"));
        geneTrees.add(makeNetwork("((B,E),((C,F),(A,D)));"));
        geneTrees.add(makeNetwork("(C,(F,((B,E),(A,D))));"));
        geneTrees.add(makeNetwork("(F,(C,((B,E),(A,D))));"));
        geneTrees.add(makeNetwork("((C,F),((B,E),(A,D)));"));
        geneTrees.add(makeNetwork("(A,(D,((B,E),(C,F))));"));
        geneTrees.add(makeNetwork("(D,(A,((B,E),(C,F))));"));
        geneTrees.add(makeNetwork("(((B,E),(C,F)),(A,D));"));
        geneTrees.add(makeNetwork("(C,(((B,E),F),(A,D)));"));
        geneTrees.add(makeNetwork("(B,(E,(F,(C,(A,D)))));"));
        geneTrees.add(makeNetwork("(E,(B,(F,(C,(A,D)))));"));
        geneTrees.add(makeNetwork("((B,E),(F,(C,(A,D))));"));
        geneTrees.add(makeNetwork("(F,((B,E),(C,(A,D))));"));
        geneTrees.add(makeNetwork("(((B,E),F),(C,(A,D)));"));
        geneTrees.add(makeNetwork("(A,(D,(C,((B,E),F))));"));
        geneTrees.add(makeNetwork("(D,(A,(C,((B,E),F))));"));
        geneTrees.add(makeNetwork("((C,((B,E),F)),(A,D));"));
        geneTrees.add(makeNetwork("(C,((B,E),(D,(A,F))));"));
        geneTrees.add(makeNetwork("(B,(E,(C,(D,(A,F)))));"));
        geneTrees.add(makeNetwork("(E,(B,(C,(D,(A,F)))));"));
        geneTrees.add(makeNetwork("((B,E),(C,(D,(A,F))));"));
        geneTrees.add(makeNetwork("(D,((A,F),(C,(B,E))));"));
        geneTrees.add(makeNetwork("(A,(F,(D,(C,(B,E)))));"));
        geneTrees.add(makeNetwork("(F,(A,(D,(C,(B,E)))));"));
        geneTrees.add(makeNetwork("((A,F),(D,(C,(B,E))));"));
        geneTrees.add(makeNetwork("((C,(B,E)),(D,(A,F)));"));
        geneTrees.add(makeNetwork("(C,((B,E),(A,(D,F))));"));
        geneTrees.add(makeNetwork("(B,(E,(C,(A,(D,F)))));"));
        geneTrees.add(makeNetwork("(E,(B,(C,(A,(D,F)))));"));
        geneTrees.add(makeNetwork("((B,E),(C,(A,(D,F))));"));
        geneTrees.add(makeNetwork("(A,((D,F),(C,(B,E))));"));
        geneTrees.add(makeNetwork("(D,(F,(A,(C,(B,E)))));"));
        geneTrees.add(makeNetwork("(F,(D,(A,(C,(B,E)))));"));
        geneTrees.add(makeNetwork("((D,F),(A,(C,(B,E))));"));
        geneTrees.add(makeNetwork("((C,(B,E)),(A,(D,F)));"));
        geneTrees.add(makeNetwork("(A,(D,((C,(B,E)),F)));"));
        geneTrees.add(makeNetwork("(D,(A,((C,(B,E)),F)));"));
        geneTrees.add(makeNetwork("(C,((B,E),(F,(A,D))));"));
        geneTrees.add(makeNetwork("(B,(E,(C,(F,(A,D)))));"));
        geneTrees.add(makeNetwork("(E,(B,(C,(F,(A,D)))));"));
        geneTrees.add(makeNetwork("((B,E),(C,(F,(A,D))));"));
        geneTrees.add(makeNetwork("((C,(B,E)),(F,(A,D)));"));
        geneTrees.add(makeNetwork("(F,((C,(B,E)),(A,D)));"));
        geneTrees.add(makeNetwork("((A,D),((C,(B,E)),F));"));
        geneTrees.add(makeNetwork("(B,((E,(C,F)),(A,D)));"));
        geneTrees.add(makeNetwork("(E,((C,F),(B,(A,D))));"));
        geneTrees.add(makeNetwork("(C,(F,(E,(B,(A,D)))));"));
        geneTrees.add(makeNetwork("(F,(C,(E,(B,(A,D)))));"));
        geneTrees.add(makeNetwork("((C,F),(E,(B,(A,D))));"));
        geneTrees.add(makeNetwork("((E,(C,F)),(B,(A,D)));"));
        geneTrees.add(makeNetwork("(A,(D,(B,(E,(C,F)))));"));
        geneTrees.add(makeNetwork("(D,(A,(B,(E,(C,F)))));"));
        geneTrees.add(makeNetwork("((B,(E,(C,F))),(A,D));"));
        geneTrees.add(makeNetwork("(B,((C,(E,F)),(A,D)));"));
        geneTrees.add(makeNetwork("(C,((E,F),(B,(A,D))));"));
        geneTrees.add(makeNetwork("(E,(F,(C,(B,(A,D)))));"));
        geneTrees.add(makeNetwork("(F,(E,(C,(B,(A,D)))));"));
        geneTrees.add(makeNetwork("((E,F),(C,(B,(A,D))));"));
        geneTrees.add(makeNetwork("((C,(E,F)),(B,(A,D)));"));
        geneTrees.add(makeNetwork("(A,(D,(B,(C,(E,F)))));"));
        geneTrees.add(makeNetwork("(D,(A,(B,(C,(E,F)))));"));
        geneTrees.add(makeNetwork("((B,(C,(E,F))),(A,D));"));
        geneTrees.add(makeNetwork("(C,(E,((B,F),(A,D))));"));
        geneTrees.add(makeNetwork("(E,(C,((B,F),(A,D))));"));
        geneTrees.add(makeNetwork("((C,E),((B,F),(A,D)));"));
        geneTrees.add(makeNetwork("(B,(F,((C,E),(A,D))));"));
        geneTrees.add(makeNetwork("(F,(B,((C,E),(A,D))));"));
        geneTrees.add(makeNetwork("((B,F),((C,E),(A,D)));"));
        geneTrees.add(makeNetwork("(A,(D,((C,E),(B,F))));"));
        geneTrees.add(makeNetwork("(D,(A,((C,E),(B,F))));"));
        geneTrees.add(makeNetwork("(((C,E),(B,F)),(A,D));"));
        geneTrees.add(makeNetwork("(B,(((C,E),F),(A,D)));"));
        geneTrees.add(makeNetwork("(C,(E,(F,(B,(A,D)))));"));
        geneTrees.add(makeNetwork("(E,(C,(F,(B,(A,D)))));"));
        geneTrees.add(makeNetwork("((C,E),(F,(B,(A,D))));"));
        geneTrees.add(makeNetwork("(F,((C,E),(B,(A,D))));"));
        geneTrees.add(makeNetwork("(((C,E),F),(B,(A,D)));"));
        geneTrees.add(makeNetwork("(A,(D,(B,((C,E),F))));"));
        geneTrees.add(makeNetwork("(D,(A,(B,((C,E),F))));"));
        geneTrees.add(makeNetwork("((B,((C,E),F)),(A,D));"));
        geneTrees.add(makeNetwork("(B,((C,E),(D,(A,F))));"));
        geneTrees.add(makeNetwork("(C,(E,(B,(D,(A,F)))));"));
        geneTrees.add(makeNetwork("(E,(C,(B,(D,(A,F)))));"));
        geneTrees.add(makeNetwork("((C,E),(B,(D,(A,F))));"));
        geneTrees.add(makeNetwork("(D,((A,F),(B,(C,E))));"));
        geneTrees.add(makeNetwork("(A,(F,(D,(B,(C,E)))));"));
        geneTrees.add(makeNetwork("(F,(A,(D,(B,(C,E)))));"));
        geneTrees.add(makeNetwork("((A,F),(D,(B,(C,E))));"));
        geneTrees.add(makeNetwork("((B,(C,E)),(D,(A,F)));"));
        geneTrees.add(makeNetwork("(B,((C,E),(A,(D,F))));"));
        geneTrees.add(makeNetwork("(C,(E,(B,(A,(D,F)))));"));
        geneTrees.add(makeNetwork("(E,(C,(B,(A,(D,F)))));"));
        geneTrees.add(makeNetwork("((C,E),(B,(A,(D,F))));"));
        geneTrees.add(makeNetwork("(A,((D,F),(B,(C,E))));"));
        geneTrees.add(makeNetwork("(D,(F,(A,(B,(C,E)))));"));
        geneTrees.add(makeNetwork("(F,(D,(A,(B,(C,E)))));"));
        geneTrees.add(makeNetwork("((D,F),(A,(B,(C,E))));"));
        geneTrees.add(makeNetwork("((B,(C,E)),(A,(D,F)));"));
        geneTrees.add(makeNetwork("(A,(D,((B,(C,E)),F)));"));
        geneTrees.add(makeNetwork("(D,(A,((B,(C,E)),F)));"));
        geneTrees.add(makeNetwork("(B,((C,E),(F,(A,D))));"));
        geneTrees.add(makeNetwork("(C,(E,(B,(F,(A,D)))));"));
        geneTrees.add(makeNetwork("(E,(C,(B,(F,(A,D)))));"));
        geneTrees.add(makeNetwork("((C,E),(B,(F,(A,D))));"));
        geneTrees.add(makeNetwork("((B,(C,E)),(F,(A,D)));"));
        geneTrees.add(makeNetwork("(F,((B,(C,E)),(A,D)));"));
        geneTrees.add(makeNetwork("((A,D),((B,(C,E)),F));"));
        geneTrees.add(makeNetwork("(C,((B,F),(D,(A,E))));"));
        geneTrees.add(makeNetwork("(B,(F,(C,(D,(A,E)))));"));
        geneTrees.add(makeNetwork("(F,(B,(C,(D,(A,E)))));"));
        geneTrees.add(makeNetwork("((B,F),(C,(D,(A,E))));"));
        geneTrees.add(makeNetwork("(D,((A,E),(C,(B,F))));"));
        geneTrees.add(makeNetwork("(A,(E,(D,(C,(B,F)))));"));
        geneTrees.add(makeNetwork("(E,(A,(D,(C,(B,F)))));"));
        geneTrees.add(makeNetwork("((A,E),(D,(C,(B,F))));"));
        geneTrees.add(makeNetwork("((C,(B,F)),(D,(A,E)));"));
        geneTrees.add(makeNetwork("(B,((C,F),(D,(A,E))));"));
        geneTrees.add(makeNetwork("(C,(F,(B,(D,(A,E)))));"));
        geneTrees.add(makeNetwork("(F,(C,(B,(D,(A,E)))));"));
        geneTrees.add(makeNetwork("((C,F),(B,(D,(A,E))));"));
        geneTrees.add(makeNetwork("(D,((A,E),(B,(C,F))));"));
        geneTrees.add(makeNetwork("(A,(E,(D,(B,(C,F)))));"));
        geneTrees.add(makeNetwork("(E,(A,(D,(B,(C,F)))));"));
        geneTrees.add(makeNetwork("((A,E),(D,(B,(C,F))));"));
        geneTrees.add(makeNetwork("((B,(C,F)),(D,(A,E)));"));
        geneTrees.add(makeNetwork("(B,(C,(D,(E,(A,F)))));"));
        geneTrees.add(makeNetwork("(C,(B,(D,(E,(A,F)))));"));
        geneTrees.add(makeNetwork("(D,((E,(A,F)),(B,C)));"));
        geneTrees.add(makeNetwork("(E,((A,F),(D,(B,C))));"));
        geneTrees.add(makeNetwork("(A,(F,(E,(D,(B,C)))));"));
        geneTrees.add(makeNetwork("(F,(A,(E,(D,(B,C)))));"));
        geneTrees.add(makeNetwork("((A,F),(E,(D,(B,C))));"));
        geneTrees.add(makeNetwork("((E,(A,F)),(D,(B,C)));"));
        geneTrees.add(makeNetwork("((B,C),(D,(E,(A,F))));"));
        geneTrees.add(makeNetwork("(B,(C,(D,(A,(E,F)))));"));
        geneTrees.add(makeNetwork("(C,(B,(D,(A,(E,F)))));"));
        geneTrees.add(makeNetwork("(D,((A,(E,F)),(B,C)));"));
        geneTrees.add(makeNetwork("(A,((E,F),(D,(B,C))));"));
        geneTrees.add(makeNetwork("(E,(F,(A,(D,(B,C)))));"));
        geneTrees.add(makeNetwork("(F,(E,(A,(D,(B,C)))));"));
        geneTrees.add(makeNetwork("((E,F),(A,(D,(B,C))));"));
        geneTrees.add(makeNetwork("((A,(E,F)),(D,(B,C)));"));
        geneTrees.add(makeNetwork("((B,C),(D,(A,(E,F))));"));
        geneTrees.add(makeNetwork("(B,(C,((A,E),(D,F))));"));
        geneTrees.add(makeNetwork("(C,(B,((A,E),(D,F))));"));
        geneTrees.add(makeNetwork("(A,(E,((D,F),(B,C))));"));
        geneTrees.add(makeNetwork("(E,(A,((D,F),(B,C))));"));
        geneTrees.add(makeNetwork("((A,E),((D,F),(B,C)));"));
        geneTrees.add(makeNetwork("(D,(F,((A,E),(B,C))));"));
        geneTrees.add(makeNetwork("(F,(D,((A,E),(B,C))));"));
        geneTrees.add(makeNetwork("((D,F),((A,E),(B,C)));"));
        geneTrees.add(makeNetwork("((B,C),((A,E),(D,F)));"));
        geneTrees.add(makeNetwork("(B,(C,(D,((A,E),F))));"));
        geneTrees.add(makeNetwork("(C,(B,(D,((A,E),F))));"));
        geneTrees.add(makeNetwork("(D,(((A,E),F),(B,C)));"));
        geneTrees.add(makeNetwork("(A,(E,(F,(D,(B,C)))));"));
        geneTrees.add(makeNetwork("(E,(A,(F,(D,(B,C)))));"));
        geneTrees.add(makeNetwork("((A,E),(F,(D,(B,C))));"));
        geneTrees.add(makeNetwork("(F,((A,E),(D,(B,C))));"));
        geneTrees.add(makeNetwork("(((A,E),F),(D,(B,C)));"));
        geneTrees.add(makeNetwork("((B,C),(D,((A,E),F)));"));
        geneTrees.add(makeNetwork("(D,((A,E),((B,C),F)));"));
        geneTrees.add(makeNetwork("(A,(E,(D,((B,C),F))));"));
        geneTrees.add(makeNetwork("(E,(A,(D,((B,C),F))));"));
        geneTrees.add(makeNetwork("((A,E),(D,((B,C),F)));"));
        geneTrees.add(makeNetwork("(B,(C,(F,(D,(A,E)))));"));
        geneTrees.add(makeNetwork("(C,(B,(F,(D,(A,E)))));"));
        geneTrees.add(makeNetwork("((B,C),(F,(D,(A,E))));"));
        geneTrees.add(makeNetwork("(F,((B,C),(D,(A,E))));"));
        geneTrees.add(makeNetwork("((D,(A,E)),((B,C),F));"));
        geneTrees.add(makeNetwork("(C,((B,F),(A,(D,E))));"));
        geneTrees.add(makeNetwork("(B,(F,(C,(A,(D,E)))));"));
        geneTrees.add(makeNetwork("(F,(B,(C,(A,(D,E)))));"));
        geneTrees.add(makeNetwork("((B,F),(C,(A,(D,E))));"));
        geneTrees.add(makeNetwork("(A,((D,E),(C,(B,F))));"));
        geneTrees.add(makeNetwork("(D,(E,(A,(C,(B,F)))));"));
        geneTrees.add(makeNetwork("(E,(D,(A,(C,(B,F)))));"));
        geneTrees.add(makeNetwork("((D,E),(A,(C,(B,F))));"));
        geneTrees.add(makeNetwork("((C,(B,F)),(A,(D,E)));"));
        geneTrees.add(makeNetwork("(B,((C,F),(A,(D,E))));"));
        geneTrees.add(makeNetwork("(C,(F,(B,(A,(D,E)))));"));
        geneTrees.add(makeNetwork("(F,(C,(B,(A,(D,E)))));"));
        geneTrees.add(makeNetwork("((C,F),(B,(A,(D,E))));"));
        geneTrees.add(makeNetwork("(A,((D,E),(B,(C,F))));"));
        geneTrees.add(makeNetwork("(D,(E,(A,(B,(C,F)))));"));
        geneTrees.add(makeNetwork("(E,(D,(A,(B,(C,F)))));"));
        geneTrees.add(makeNetwork("((D,E),(A,(B,(C,F))));"));
        geneTrees.add(makeNetwork("((B,(C,F)),(A,(D,E)));"));
        geneTrees.add(makeNetwork("(B,(C,(A,(E,(D,F)))));"));
        geneTrees.add(makeNetwork("(C,(B,(A,(E,(D,F)))));"));
        geneTrees.add(makeNetwork("(A,((E,(D,F)),(B,C)));"));
        geneTrees.add(makeNetwork("(E,((D,F),(A,(B,C))));"));
        geneTrees.add(makeNetwork("(D,(F,(E,(A,(B,C)))));"));
        geneTrees.add(makeNetwork("(F,(D,(E,(A,(B,C)))));"));
        geneTrees.add(makeNetwork("((D,F),(E,(A,(B,C))));"));
        geneTrees.add(makeNetwork("((E,(D,F)),(A,(B,C)));"));
        geneTrees.add(makeNetwork("((B,C),(A,(E,(D,F))));"));
        geneTrees.add(makeNetwork("(B,(C,(A,(D,(E,F)))));"));
        geneTrees.add(makeNetwork("(C,(B,(A,(D,(E,F)))));"));
        geneTrees.add(makeNetwork("(A,((D,(E,F)),(B,C)));"));
        geneTrees.add(makeNetwork("(D,((E,F),(A,(B,C))));"));
        geneTrees.add(makeNetwork("(E,(F,(D,(A,(B,C)))));"));
        geneTrees.add(makeNetwork("(F,(E,(D,(A,(B,C)))));"));
        geneTrees.add(makeNetwork("((E,F),(D,(A,(B,C))));"));
        geneTrees.add(makeNetwork("((D,(E,F)),(A,(B,C)));"));
        geneTrees.add(makeNetwork("((B,C),(A,(D,(E,F))));"));
        geneTrees.add(makeNetwork("(B,(C,((D,E),(A,F))));"));
        geneTrees.add(makeNetwork("(C,(B,((D,E),(A,F))));"));
        geneTrees.add(makeNetwork("(D,(E,((A,F),(B,C))));"));
        geneTrees.add(makeNetwork("(E,(D,((A,F),(B,C))));"));
        geneTrees.add(makeNetwork("((D,E),((A,F),(B,C)));"));
        geneTrees.add(makeNetwork("(A,(F,((D,E),(B,C))));"));
        geneTrees.add(makeNetwork("(F,(A,((D,E),(B,C))));"));
        geneTrees.add(makeNetwork("((A,F),((D,E),(B,C)));"));
        geneTrees.add(makeNetwork("((B,C),((D,E),(A,F)));"));
        geneTrees.add(makeNetwork("(B,(C,(A,((D,E),F))));"));
        geneTrees.add(makeNetwork("(C,(B,(A,((D,E),F))));"));
        geneTrees.add(makeNetwork("(A,(((D,E),F),(B,C)));"));
        geneTrees.add(makeNetwork("(D,(E,(F,(A,(B,C)))));"));
        geneTrees.add(makeNetwork("(E,(D,(F,(A,(B,C)))));"));
        geneTrees.add(makeNetwork("((D,E),(F,(A,(B,C))));"));
        geneTrees.add(makeNetwork("(F,((D,E),(A,(B,C))));"));
        geneTrees.add(makeNetwork("(((D,E),F),(A,(B,C)));"));
        geneTrees.add(makeNetwork("((B,C),(A,((D,E),F)));"));
        geneTrees.add(makeNetwork("(A,((D,E),((B,C),F)));"));
        geneTrees.add(makeNetwork("(D,(E,(A,((B,C),F))));"));
        geneTrees.add(makeNetwork("(E,(D,(A,((B,C),F))));"));
        geneTrees.add(makeNetwork("((D,E),(A,((B,C),F)));"));
        geneTrees.add(makeNetwork("(B,(C,(F,(A,(D,E)))));"));
        geneTrees.add(makeNetwork("(C,(B,(F,(A,(D,E)))));"));
        geneTrees.add(makeNetwork("((B,C),(F,(A,(D,E))));"));
        geneTrees.add(makeNetwork("(F,((B,C),(A,(D,E))));"));
        geneTrees.add(makeNetwork("((A,(D,E)),((B,C),F));"));
        geneTrees.add(makeNetwork("(D,((A,F),((B,C),E)));"));
        geneTrees.add(makeNetwork("(A,(F,(D,((B,C),E))));"));
        geneTrees.add(makeNetwork("(F,(A,(D,((B,C),E))));"));
        geneTrees.add(makeNetwork("((A,F),(D,((B,C),E)));"));
        geneTrees.add(makeNetwork("(B,(C,(E,(D,(A,F)))));"));
        geneTrees.add(makeNetwork("(C,(B,(E,(D,(A,F)))));"));
        geneTrees.add(makeNetwork("((B,C),(E,(D,(A,F))));"));
        geneTrees.add(makeNetwork("(E,((B,C),(D,(A,F))));"));
        geneTrees.add(makeNetwork("((D,(A,F)),((B,C),E));"));
        geneTrees.add(makeNetwork("(A,((D,F),((B,C),E)));"));
        geneTrees.add(makeNetwork("(D,(F,(A,((B,C),E))));"));
        geneTrees.add(makeNetwork("(F,(D,(A,((B,C),E))));"));
        geneTrees.add(makeNetwork("((D,F),(A,((B,C),E)));"));
        geneTrees.add(makeNetwork("(B,(C,(E,(A,(D,F)))));"));
        geneTrees.add(makeNetwork("(C,(B,(E,(A,(D,F)))));"));
        geneTrees.add(makeNetwork("((B,C),(E,(A,(D,F))));"));
        geneTrees.add(makeNetwork("(E,((B,C),(A,(D,F))));"));
        geneTrees.add(makeNetwork("((A,(D,F)),((B,C),E));"));
        geneTrees.add(makeNetwork("(A,(D,((C,(B,F)),E)));"));
        geneTrees.add(makeNetwork("(D,(A,((C,(B,F)),E)));"));
        geneTrees.add(makeNetwork("(C,((B,F),(E,(A,D))));"));
        geneTrees.add(makeNetwork("(B,(F,(C,(E,(A,D)))));"));
        geneTrees.add(makeNetwork("(F,(B,(C,(E,(A,D)))));"));
        geneTrees.add(makeNetwork("((B,F),(C,(E,(A,D))));"));
        geneTrees.add(makeNetwork("((C,(B,F)),(E,(A,D)));"));
        geneTrees.add(makeNetwork("(E,((C,(B,F)),(A,D)));"));
        geneTrees.add(makeNetwork("((A,D),((C,(B,F)),E));"));
        geneTrees.add(makeNetwork("(A,(D,((B,(C,F)),E)));"));
        geneTrees.add(makeNetwork("(D,(A,((B,(C,F)),E)));"));
        geneTrees.add(makeNetwork("(B,((C,F),(E,(A,D))));"));
        geneTrees.add(makeNetwork("(C,(F,(B,(E,(A,D)))));"));
        geneTrees.add(makeNetwork("(F,(C,(B,(E,(A,D)))));"));
        geneTrees.add(makeNetwork("((C,F),(B,(E,(A,D))));"));
        geneTrees.add(makeNetwork("((B,(C,F)),(E,(A,D)));"));
        geneTrees.add(makeNetwork("(E,((B,(C,F)),(A,D)));"));
        geneTrees.add(makeNetwork("((A,D),((B,(C,F)),E));"));
        geneTrees.add(makeNetwork("(A,(D,(E,((B,C),F))));"));
        geneTrees.add(makeNetwork("(D,(A,(E,((B,C),F))));"));
        geneTrees.add(makeNetwork("(E,(((B,C),F),(A,D)));"));
        geneTrees.add(makeNetwork("(B,(C,(F,(E,(A,D)))));"));
        geneTrees.add(makeNetwork("(C,(B,(F,(E,(A,D)))));"));
        geneTrees.add(makeNetwork("((B,C),(F,(E,(A,D))));"));
        geneTrees.add(makeNetwork("(F,((B,C),(E,(A,D))));"));
        geneTrees.add(makeNetwork("(((B,C),F),(E,(A,D)));"));
        geneTrees.add(makeNetwork("((A,D),(E,((B,C),F)));"));
        geneTrees.add(makeNetwork("(A,(D,((B,C),(E,F))));"));
        geneTrees.add(makeNetwork("(D,(A,((B,C),(E,F))));"));
        geneTrees.add(makeNetwork("(B,(C,((E,F),(A,D))));"));
        geneTrees.add(makeNetwork("(C,(B,((E,F),(A,D))));"));
        geneTrees.add(makeNetwork("((B,C),((E,F),(A,D)));"));
        geneTrees.add(makeNetwork("(E,(F,((B,C),(A,D))));"));
        geneTrees.add(makeNetwork("(F,(E,((B,C),(A,D))));"));
        geneTrees.add(makeNetwork("((E,F),((B,C),(A,D)));"));
        geneTrees.add(makeNetwork("((A,D),((B,C),(E,F)));"));
        geneTrees.add(makeNetwork("(B,(C,(E,((A,D),F))));"));
        geneTrees.add(makeNetwork("(C,(B,(E,((A,D),F))));"));
        geneTrees.add(makeNetwork("((B,C),(E,((A,D),F)));"));
        geneTrees.add(makeNetwork("(E,((B,C),((A,D),F)));"));
        geneTrees.add(makeNetwork("(A,(D,(F,((B,C),E))));"));
        geneTrees.add(makeNetwork("(D,(A,(F,((B,C),E))));"));
        geneTrees.add(makeNetwork("((A,D),(F,((B,C),E)));"));
        geneTrees.add(makeNetwork("(F,((A,D),((B,C),E)));"));
        geneTrees.add(makeNetwork("(((B,C),E),((A,D),F));"));


        MDCOnNetworkYF scorer = new MDCOnNetworkYF();
        scorer.setPrintDetails(false);
        int total = 0;
        for(int score: scorer.countExtraCoal(network, geneTrees, null, _getNetworkNodeLabel, _getNetworkNodeLabel, _getNetworkDistance, _getProbability, _getNetworkDistance, _getProbability,
                _makeNetworkEdge, _makeNetworkEdge)){
            total += score;
        }
        Assert.assertTrue(total == 4305);

        int i = 0;
    }

}
