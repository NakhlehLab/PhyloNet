<project name="MyProject" default="dist" basedir=".">
    <description>
        simple example build file
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  <property name="dependencies"  location="dependencies"/>

  <property name="main.class" value="runHmm.runHmm"/>

  <path id="build.classpath">
    <fileset dir="${basedir}/">
      <include name="${basedir}/${dependencies}/*.jar"/>
    </fileset>
  </path>

  <path id="jars">
    <fileset dir="${basedir}/dependencies" includes="**/*.jar"/>
  </path>

  <pathconvert property="mf.classpath" pathsep=" ">
    <path refid="build.classpath"/>
    <mapper>
      <chainedmapper>
	<flattenmapper/>
	<globmapper from="*.jar" to="${dependencies}/*.jar"/>
      </chainedmapper>
    </mapper>
  </pathconvert>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" classpathref="jars" debug="on" includeantruntime="false">
      <!-- compilerarg value="-Xlint"/ -->
    </javac>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- ${dist}/lib/phmm-${DSTAMP}.jar -->
    <jar destfile="${dist}/lib/phmm.jar" basedir="${build}" filesetmanifest="skip">
      <!-- pull in classes in jar files from dependencies -->
      <!-- basically statically linking to libraries -->
      <zipgroupfileset dir="${dependencies}" includes="*.jar"/>
      <zipgroupfileset dir="${dist}/lib" includes="*.jar" excludes=""/>

      <manifest>
        <attribute name="Main-Class" value="${main.class}"/>
        <attribute name="Class-Path" value="${mf.classpath}"/>
      </manifest>
    </jar>
  </target>

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
