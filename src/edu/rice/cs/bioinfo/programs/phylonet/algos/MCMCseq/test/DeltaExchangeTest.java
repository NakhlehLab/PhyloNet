package edu.rice.cs.bioinfo.programs.phylonet.algos.MCMCseq.test;
/*
 * @ClassName:   DeltaExchangeTest
 * @Description:
 * @Author:      Zhen Cao
 * @Date:        8/23/21 2:39 PM
 */


import edu.rice.cs.bioinfo.library.programming.Tuple;
import edu.rice.cs.bioinfo.programs.phylonet.algos.MCMCseq.distribution.SpeciesNetPriorDistribution;
import edu.rice.cs.bioinfo.programs.phylonet.algos.MCMCseq.felsenstein.alignment.Alignment;
import edu.rice.cs.bioinfo.programs.phylonet.algos.MCMCseq.move.Operator;
import edu.rice.cs.bioinfo.programs.phylonet.algos.MCMCseq.move.all.DeltaExchange;
import edu.rice.cs.bioinfo.programs.phylonet.algos.MCMCseq.structs.UltrametricNetwork;
import edu.rice.cs.bioinfo.programs.phylonet.algos.MCMCseq.structs.UltrametricTree;
import edu.rice.cs.bioinfo.programs.phylonet.algos.MCMCseq.util.Utils;
import java.util.*;

import static junit.framework.TestCase.assertEquals;

public class DeltaExchangeTest{

    public void testKeepsSum() {

        Double[] tmp = {1., 1., 1., 1.};
        List<Double> parameter = Arrays.asList(tmp);
        Utils._PARAMETER_INPUT = parameter;
        Utils._DELTA = 0.75;
        DeltaExchange operator = new DeltaExchange();
        System.out.println(operator._parameter_input);
        for (int i=0; i<100; ++i) {
            operator.propose();
            System.out.println(operator._parameter_input);
        }
        double i = 0;
        for (Double p : parameter) {
            i += p;
        }
        assertEquals("The DeltaExchangeOperator should not change the sum of a parameter", i, 4, 0.00001);
    }

    public void testKeepsWeightedSum() {
        Double[] p = {1., 1., 1., 1.};
        Utils._PARAMETER_INPUT = Arrays.asList(p);
        Integer[] integers = {0, 1, 2, 1};
        Utils._WEIGHT_VECTOR = Arrays.asList(integers);

        DeltaExchange operator = new DeltaExchange();

        double sum = 0;
        for (int i = 0; i < 4; i++){
            sum += operator._weight_vector.get(i) * operator._parameter_input.get(i);
        }
        assertEquals("The DeltaExchangeOperator should not change the weighted sum of a parameter",
                sum, 4, 0.00001);
    }

    public void testOnTree(){

        List<Alignment> alignments = new ArrayList<>();
        List<UltrametricTree> geneTrees = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            Map<String, String> locus = new HashMap<>();
            locus.put("A", "CTTCGTGACGGGCTCGGCTCGTACGGTCAAGGGCACCTGAGCTAGGCAACTCAAGACGGGCGAGAGTCCCGCTACTACGGAAAAGGGTTTGCAGCTTCGAACATAGAACCACGGGACCTCCGGGACTCGCCCAATTGCGGTCGATGGCACTACGATTGGACAGGCGCTTACGCCAATTTACAGGTAGCGAGAGGTCTGCGCAGCAAAAGACTCCGCTTCACCCGGTGGTACCTGACTCGCGGCGCTGACCGTTCGCCGTAAGCGTTGACAATTTTCGGAAGCATCGCCAAAGTGCTGGAGTACGGGCTTCACACCCGCAACCACCGACAGCCCAACGAATCACTTCGCCGGTTGTCCTTCACCCCTGTTGGCAGAGGATGCTTGCGTGACTTTCATCCTTCTGTCCTTTCGTGCGGACTCGCACAGATCCTCCAAACAAGCGAGATCCGACCGATACTCTGCCCCCAGCAAGGCGGGGTTTCAGCGTCCCGTAGCTAGTAGGTATCCAGTCCAGAGGCACGTAGAGCACTCACCGTCCCCAGCCCCCCTCCACTCATCGCTGTGTTGAGGTCAAGTTCCCCGAGATCGTACTAACCGGTATGCAACCCACATCTGCCCATAGTCTACCCATCATACTACAGTCAGTAAACCCGGAGTGTATGGCTCGACTAATGTCCGTACAGCCAGCGCTCGATAAGTGCGTGCTCGAACGCTTACACCCCTGCTGGCACCAGGTAGCGCATGATCCACCAATGCAGCCCGAGCGCTTGCTGTGACTTCCGTCCGAAAGTATCGAGTTAAGCCTCAGCAATATGGGCCACCTTGACTGAGCTACACTCCCTCCCGTACGGGTGAAGTCCCCGCCGGCACAGGGGGGACACTTCTATTGAACATTTCGCCTCACCGAAGTCGCCCCCGAGTACGCCAGTGACGTACAGTCGCACGCGGGTTTGGTAAGGAGGAGCCAGATCGCGTCTACATGTTGAGTAGGTCCCGGCGC");
            locus.put("G", "CTACGTGACGGGCCTGGCTCGCACGGTCAATGGCACTTGAGCTAGGCAACCCAAGACGGGCGAGGGTCCCGCTACTACGGAAAAGGGTGTGCAGCTTCGAACATAGAACCACGGGACCTCCGGGACTCGCTCAATTGCGGTCGGTGGTACTACGATTGGACGGGCACTTTCGGCAATTTACAATTAGCGAGAGGTCTGCGCAGCAAAAGACTCCAATTCACCCGGCGCTACCTGATTCGCGGCACTGACCGTTCGCCGTAAGCGTTGACAAATTTCGGTAGCATCGCCAAAGTGCTGGAGTACGGGCTTCACACTTGTAGCCACCGACAGCCCAACGAATCAATTCGCCAGTTGCCCTTCACTCCTGTTAGCAGAGGATGCCAGCATGAGATTCATCCATCTGTCCTTTCGAGCGGACTCGCACAGATACTCCAAACAAGCGAGATCCGACCGGTACTCTACCCCTCACAAAGCGGGATTTCAGCGTCTCGTAGTGAGTAGGTATCCGGTCCAGAGGCACGTAGAGCCCTCACTGTCCTCAGCCCCCCTCTACTCATTGCTGTGTTGAGGTGAAGTTCCCCGAAATCGTACTAACCGGTATGCAACCCAGATCTGCCCATAGGCTACACATCATACTACAGCCAGTAAACCCGGAGTGTATGGCTTGACTAAGGTCCGTACAGCCAGCGCTCGATAAGTACGTGCTCGAACGCTTACACCCCTGCTGGCACCAGGTAGCGTATGATCCACCGATGCAGCCCGAGCGCTTGCTGTGACTTCCGTCCGAAAGTATTGAGTTAAGCCTCAGCAATATGGGCCACCCTGACTGAGCTACGCTCCCTTCCGTACGGATGAAGTCCCCACCGGGACAGGGGGGACGCTTCTATTGAACACTTCACCTCACCGAAGTCGCCCCCGAGTACACCAGTGACGTACAGTCGCACGCGGGTTCGATAAGGAGGGGCCAGATCGCGTCTACATGTTGAGTAGGTCCCTGCGC");
            locus.put("Q", "CCATACGATGGGCTCGGCTCGTATGATTGAGGGCACCGAAGCTAGGCGACTCAAGATGGGCGAGGGCTCCGCGAATACGGAAAAGGGTATGCAGCTTCGGCCATAGGACCACGTGATCTCCGGGACTCGCCCAATTGAGATCGGCGTTACTACAATTAGACGAGCACATTCGCCAATTTATAGTTAACAAGAGATCTGCGTAGCAAAAGATTCAACGTTACCCGGCGCTACCAGACCCGCGGCACAGGCCGTTTGCCCTAAGCGTTGACAATCTTCGGATTCATCGCCAAAGTGCTGGAGTACAGGCTTCACACCTACAGCCACTGACAGCCTAACGAATCACTTCACCAATTGCCTTTCACCCCTGTTAGCGGAGGGCGCTAGCATAACTTTCGTCCTACGTTCCTCTCGTACGGATTCGGACAGATCCTCCGAGCAAGCGAAGTCCGGCCGATACTCTGCCCCTAGCAAGGCGGGATCCCGTCGCCTTGTAGTGAGCAGATATCCAGTTTGGGAGCACATAGAGCACCGACCGTCCACAGTCCCCTTCTCTTCATTGGTGCGTTGAGGTGAAAGTTCCCGAAATCCTACAAACTGGTATGCAAACCGGATCTGCAGGTTGGCTACGTATCATACTACAGCCCGTAAACTCGGAGTGCATGGCTTGACTAACATCCGTACAAACAGCGCTCGATGAGTGCGACCTCGGCAGCTTACACCCTTGCTGACACCAAATAGCGCATGATCCACCAGTACAGCCCAAGCGCCTTTCGCGTCCTCCGCCCGAATGTATGGATGTAAGCCTGAGTCACGTGGACCACCGTGCCCGAGCTACGCTCCCTTACGTGCGGATGATGTCCCCGCCGGGACAGGCGGAACGCTTCTATTGAACATTTCACCTCGCTGAAGTCGCCCCTGAGTACGCCAGCAACGTACAGTCGCACGCGAGCTCAGTAAGGAGGAGCCATATCGCGTCTACATGATGCGTAGGTCCCTGCGC");
            locus.put("L", "CTACGCGACGGGCTCGGCTCGTACAATAAAGGGCACCAGAGCTAGGTAACCCAAGATAGGCGAGGGCTTCGCTAATACGGAGAAGGGTATTCAGCTTCGGTCACAGGGCCACGTGATCTCCGGGACTCGCCCAGTTGCGATCGGCGTTACTACAATTGGAGGGGCACATTCGCCAACTTACAGTTAGTGAGGGATCTGCGTATCAAAAAACTCCACACTACTCGGCGCGACCTGGCTCGTGGCGCAGGCCGTTTGCCGTAAGTGTTGAGAATTTTCGGAAGAATGGCCGGAGTGTTAGAGTCCAGGCTTCACACCTACAGCCATTGACAGCTCAACGAGTCATTTCACCAGTTGCCTTTCACCCCTGTTAGCAGAGGGAGCTAGCGCAGCTTTCATCCTATGTCCATCTCGGGCGGACTCGGACAGATCCTCCGAACAAGCGAGGTCCGGTCGATACTCTGCCCCTAACAAGGCAGGATCCCATCGCCTTGTAGTGAGCAGATATCCAGTTTAGGGGCGCATAGAGCACCCACCGTCCACAGCCCCCTTGTACTTATTGGTGTGTTGAGGTGAAAGTCCCCGAAATCCCAGGAACTTGTATGCAACCCAGATCTGCAGGTAGGCTACGTATCATACTGTACCCCGCAAACTCGGAGTGTGTGACTGGACTAACGTCCGTACAAACAGCGCTCGATAGGTGCGACCTCGACAGCTTACACCCTTGCTGGCACCAAATAGCGCGTGATCCACCAGTGCAGACCAAACGTTTTCTGCGCCCTCCGTCCGAAAGTACGGGTTTAAGTCTCAGTAACATGGTCCACTATGACCGAACTATACCCCCTTACGTACGGGTGATGTCCCCGCCGGGACGGGCGGGACGCTTCTACTGAACGCTTCACTTCACTGAAGTCGCCCCTGAGTATGCCAGCAACGTACAGTCGCACGCGAGCTCGGTAAAGAGGAACCAGATCCCGTCGACATGTTGAGTTGGTCCCTATGC");
            Alignment seq = new Alignment(locus);
            alignments.add(seq);
            UltrametricTree ut = new UltrametricTree(seq);
            geneTrees.add(ut);
        }
        for (int i = 0; i < 4; i++){
            System.out.println(geneTrees.get(i).getTree().toString());
            System.out.println(geneTrees.get(i).logDensity());
        }

        UltrametricNetwork net = new UltrametricNetwork("(((((Q:6.118912888668597E-4,A:6.118912888668597E-4):0.0014582604366068315,L:0.002070151725473691):0.0029224070429960647,(G:0.0028127426064904343)#H1:0.0021798161619793217::0.458754682883068):0.06682233548029128,(#H1:0.05544492426885144::0.541245317116932)#H2:0.013557227373419155::0.7707779990439652):0.1443214468061284,#H2:0.15787867417954757::0.22922200095603484); "
                , geneTrees);
//        System.out.println(geneTrees.get(0).getTree().toNewick());
//        System.out.println(net.getNetwork().toString());
        int runs = 1000;
        int test = 0;
        int test2 = 0;
        Double[] p = {1., 1., 1., 1.};
        Utils._PARAMETER_INPUT = Arrays.asList(p);
        DeltaExchange op = new DeltaExchange(geneTrees);
        for(int i = 0; i < runs; i++) {
            double logHR = op.propose();
            boolean valid = true;
            System.out.println("------------ "+i+" ------------");
            System.out.println(op._dim1+","+ op._scalar1);
            System.out.println(op._dim2+","+ op._scalar2);
            for (int j = 0; j < geneTrees.size(); j++){
                if (!geneTrees.get(j).isValid()){
                    valid = false;
                    break;
                }
                else{
                    UltrametricTree ut = geneTrees.get(j);
                    System.out.println(ut.getTree().toString());
                    System.out.println(ut.logDensity());
                }
            }
            System.out.println("network log density");
            net.setDirty(true);
            System.out.println(net.logDensity());
            if(valid) {
                test2++;
            } else {
                op.undo();
            }
            for (int j = 0; j < geneTrees.size(); j++){
                if (!geneTrees.get(j).isValid()){
                    valid = false;
                    break;
                }
            }
            if(valid) {
                test++;
            }

        }
        for (int i = 0; i < 4; i++){
            System.out.println(op._parameter_input.get(i));
            System.out.println(geneTrees.get(i).getTree().toString());
        }
        System.out.println(net.getNetwork());
        System.out.println(test == runs);
        System.out.printf("%d out of %d\n", test, runs);
        System.out.printf("%d out of %d\n", test2, runs);

    }

    public void testOnTreeundo(){

        List<Alignment> alignments = new ArrayList<>();
        List<UltrametricTree> geneTrees = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            Map<String, String> locus = new HashMap<>();
            locus.put("A", "CTTCGTGACGGGCTCGGCTCGTACGGTCAAGGGCACCTGAGCTAGGCAACTCAAGACGGGCGAGAGTCCCGCTACTACGGAAAAGGGTTTGCAGCTTCGAACATAGAACCACGGGACCTCCGGGACTCGCCCAATTGCGGTCGATGGCACTACGATTGGACAGGCGCTTACGCCAATTTACAGGTAGCGAGAGGTCTGCGCAGCAAAAGACTCCGCTTCACCCGGTGGTACCTGACTCGCGGCGCTGACCGTTCGCCGTAAGCGTTGACAATTTTCGGAAGCATCGCCAAAGTGCTGGAGTACGGGCTTCACACCCGCAACCACCGACAGCCCAACGAATCACTTCGCCGGTTGTCCTTCACCCCTGTTGGCAGAGGATGCTTGCGTGACTTTCATCCTTCTGTCCTTTCGTGCGGACTCGCACAGATCCTCCAAACAAGCGAGATCCGACCGATACTCTGCCCCCAGCAAGGCGGGGTTTCAGCGTCCCGTAGCTAGTAGGTATCCAGTCCAGAGGCACGTAGAGCACTCACCGTCCCCAGCCCCCCTCCACTCATCGCTGTGTTGAGGTCAAGTTCCCCGAGATCGTACTAACCGGTATGCAACCCACATCTGCCCATAGTCTACCCATCATACTACAGTCAGTAAACCCGGAGTGTATGGCTCGACTAATGTCCGTACAGCCAGCGCTCGATAAGTGCGTGCTCGAACGCTTACACCCCTGCTGGCACCAGGTAGCGCATGATCCACCAATGCAGCCCGAGCGCTTGCTGTGACTTCCGTCCGAAAGTATCGAGTTAAGCCTCAGCAATATGGGCCACCTTGACTGAGCTACACTCCCTCCCGTACGGGTGAAGTCCCCGCCGGCACAGGGGGGACACTTCTATTGAACATTTCGCCTCACCGAAGTCGCCCCCGAGTACGCCAGTGACGTACAGTCGCACGCGGGTTTGGTAAGGAGGAGCCAGATCGCGTCTACATGTTGAGTAGGTCCCGGCGC");
            locus.put("G", "CTACGTGACGGGCCTGGCTCGCACGGTCAATGGCACTTGAGCTAGGCAACCCAAGACGGGCGAGGGTCCCGCTACTACGGAAAAGGGTGTGCAGCTTCGAACATAGAACCACGGGACCTCCGGGACTCGCTCAATTGCGGTCGGTGGTACTACGATTGGACGGGCACTTTCGGCAATTTACAATTAGCGAGAGGTCTGCGCAGCAAAAGACTCCAATTCACCCGGCGCTACCTGATTCGCGGCACTGACCGTTCGCCGTAAGCGTTGACAAATTTCGGTAGCATCGCCAAAGTGCTGGAGTACGGGCTTCACACTTGTAGCCACCGACAGCCCAACGAATCAATTCGCCAGTTGCCCTTCACTCCTGTTAGCAGAGGATGCCAGCATGAGATTCATCCATCTGTCCTTTCGAGCGGACTCGCACAGATACTCCAAACAAGCGAGATCCGACCGGTACTCTACCCCTCACAAAGCGGGATTTCAGCGTCTCGTAGTGAGTAGGTATCCGGTCCAGAGGCACGTAGAGCCCTCACTGTCCTCAGCCCCCCTCTACTCATTGCTGTGTTGAGGTGAAGTTCCCCGAAATCGTACTAACCGGTATGCAACCCAGATCTGCCCATAGGCTACACATCATACTACAGCCAGTAAACCCGGAGTGTATGGCTTGACTAAGGTCCGTACAGCCAGCGCTCGATAAGTACGTGCTCGAACGCTTACACCCCTGCTGGCACCAGGTAGCGTATGATCCACCGATGCAGCCCGAGCGCTTGCTGTGACTTCCGTCCGAAAGTATTGAGTTAAGCCTCAGCAATATGGGCCACCCTGACTGAGCTACGCTCCCTTCCGTACGGATGAAGTCCCCACCGGGACAGGGGGGACGCTTCTATTGAACACTTCACCTCACCGAAGTCGCCCCCGAGTACACCAGTGACGTACAGTCGCACGCGGGTTCGATAAGGAGGGGCCAGATCGCGTCTACATGTTGAGTAGGTCCCTGCGC");
            locus.put("Q", "CCATACGATGGGCTCGGCTCGTATGATTGAGGGCACCGAAGCTAGGCGACTCAAGATGGGCGAGGGCTCCGCGAATACGGAAAAGGGTATGCAGCTTCGGCCATAGGACCACGTGATCTCCGGGACTCGCCCAATTGAGATCGGCGTTACTACAATTAGACGAGCACATTCGCCAATTTATAGTTAACAAGAGATCTGCGTAGCAAAAGATTCAACGTTACCCGGCGCTACCAGACCCGCGGCACAGGCCGTTTGCCCTAAGCGTTGACAATCTTCGGATTCATCGCCAAAGTGCTGGAGTACAGGCTTCACACCTACAGCCACTGACAGCCTAACGAATCACTTCACCAATTGCCTTTCACCCCTGTTAGCGGAGGGCGCTAGCATAACTTTCGTCCTACGTTCCTCTCGTACGGATTCGGACAGATCCTCCGAGCAAGCGAAGTCCGGCCGATACTCTGCCCCTAGCAAGGCGGGATCCCGTCGCCTTGTAGTGAGCAGATATCCAGTTTGGGAGCACATAGAGCACCGACCGTCCACAGTCCCCTTCTCTTCATTGGTGCGTTGAGGTGAAAGTTCCCGAAATCCTACAAACTGGTATGCAAACCGGATCTGCAGGTTGGCTACGTATCATACTACAGCCCGTAAACTCGGAGTGCATGGCTTGACTAACATCCGTACAAACAGCGCTCGATGAGTGCGACCTCGGCAGCTTACACCCTTGCTGACACCAAATAGCGCATGATCCACCAGTACAGCCCAAGCGCCTTTCGCGTCCTCCGCCCGAATGTATGGATGTAAGCCTGAGTCACGTGGACCACCGTGCCCGAGCTACGCTCCCTTACGTGCGGATGATGTCCCCGCCGGGACAGGCGGAACGCTTCTATTGAACATTTCACCTCGCTGAAGTCGCCCCTGAGTACGCCAGCAACGTACAGTCGCACGCGAGCTCAGTAAGGAGGAGCCATATCGCGTCTACATGATGCGTAGGTCCCTGCGC");
            locus.put("L", "CTACGCGACGGGCTCGGCTCGTACAATAAAGGGCACCAGAGCTAGGTAACCCAAGATAGGCGAGGGCTTCGCTAATACGGAGAAGGGTATTCAGCTTCGGTCACAGGGCCACGTGATCTCCGGGACTCGCCCAGTTGCGATCGGCGTTACTACAATTGGAGGGGCACATTCGCCAACTTACAGTTAGTGAGGGATCTGCGTATCAAAAAACTCCACACTACTCGGCGCGACCTGGCTCGTGGCGCAGGCCGTTTGCCGTAAGTGTTGAGAATTTTCGGAAGAATGGCCGGAGTGTTAGAGTCCAGGCTTCACACCTACAGCCATTGACAGCTCAACGAGTCATTTCACCAGTTGCCTTTCACCCCTGTTAGCAGAGGGAGCTAGCGCAGCTTTCATCCTATGTCCATCTCGGGCGGACTCGGACAGATCCTCCGAACAAGCGAGGTCCGGTCGATACTCTGCCCCTAACAAGGCAGGATCCCATCGCCTTGTAGTGAGCAGATATCCAGTTTAGGGGCGCATAGAGCACCCACCGTCCACAGCCCCCTTGTACTTATTGGTGTGTTGAGGTGAAAGTCCCCGAAATCCCAGGAACTTGTATGCAACCCAGATCTGCAGGTAGGCTACGTATCATACTGTACCCCGCAAACTCGGAGTGTGTGACTGGACTAACGTCCGTACAAACAGCGCTCGATAGGTGCGACCTCGACAGCTTACACCCTTGCTGGCACCAAATAGCGCGTGATCCACCAGTGCAGACCAAACGTTTTCTGCGCCCTCCGTCCGAAAGTACGGGTTTAAGTCTCAGTAACATGGTCCACTATGACCGAACTATACCCCCTTACGTACGGGTGATGTCCCCGCCGGGACGGGCGGGACGCTTCTACTGAACGCTTCACTTCACTGAAGTCGCCCCTGAGTATGCCAGCAACGTACAGTCGCACGCGAGCTCGGTAAAGAGGAACCAGATCCCGTCGACATGTTGAGTTGGTCCCTATGC");
            Alignment seq = new Alignment(locus);
            alignments.add(seq);
            UltrametricTree ut = new UltrametricTree(seq);
            geneTrees.add(ut);
        }
        for (int i = 0; i < 4; i++){
            System.out.println(geneTrees.get(i).getTree().toString());
        }

        UltrametricNetwork net = new UltrametricNetwork("(((((Q:6.118912888668597E-4,A:6.118912888668597E-4):0.0014582604366068315,L:0.002070151725473691):0.0029224070429960647,(G:0.0028127426064904343)#H1:0.0021798161619793217::0.458754682883068):0.06682233548029128,(#H1:0.05544492426885144::0.541245317116932)#H2:0.013557227373419155::0.7707779990439652):0.1443214468061284,#H2:0.15787867417954757::0.22922200095603484); "
                , geneTrees);
        int runs = 10;
        int test = 0;
        int test2 = 0;
        Double[] p = {1., 1., 1., 1.};
        Utils._PARAMETER_INPUT = Arrays.asList(p);
        DeltaExchange op = new DeltaExchange(geneTrees);
        for(int i = 0; i < runs; i++) {
            double logHR = op.propose();
            boolean valid = true;
            System.out.println("------------propose "+i+" ------------");
            System.out.println(op._dim1+","+ op._scalar1);
            System.out.println(op._dim2+","+ op._scalar2);

            for (int j = 0; j < geneTrees.size(); j++){
                if (!geneTrees.get(j).isValid()){
                    valid = false;
                    break;
                }
                else{
                    UltrametricTree ut = geneTrees.get(j);
                    System.out.println(ut.getTree().toString());
                    System.out.println(ut.logDensity());
                }
            }
            op.undo();
            System.out.println("------------undo "+i+" ------------");

            for (int j = 0; j < geneTrees.size(); j++){
                if (!geneTrees.get(j).isValid()){
                    valid = false;
                    break;
                }
                else{
                    UltrametricTree ut = geneTrees.get(j);
                    System.out.println(ut.getTree().toString());
                    System.out.println(ut.logDensity());
                }
            }

        }
        for (int i = 0; i < 4; i++){
            System.out.println(op._parameter_input.get(i));
            System.out.println(geneTrees.get(i).getTree().toString());
        }
        System.out.println(net.getNetwork());
        System.out.println(test == runs);
        System.out.printf("%d out of %d\n", test, runs);
        System.out.printf("%d out of %d\n", test2, runs);

    }


    public void testState(){

    }

    public static void main(String[] args) {
        DeltaExchangeTest deltaExchangeTest = new DeltaExchangeTest();
        deltaExchangeTest.testKeepsSum();
        deltaExchangeTest.testKeepsWeightedSum();
        deltaExchangeTest.testOnTree();
//        deltaExchangeTest.testOnTreeundo();
        {
//        String s = "(((R:1.5,(Q:0.5)I8#H1:1::0.3)I7:2.5,((I8#H1:0.5::0.7,(A:0.5)I6#H2:0.5::0.8)I4:1,L:2)I3:2)I2:1,((I6#H2:0.5::0.2,C:1)I5:1,G:2)I1:3)I0:0;";
//        List<String> selectedLeaves= new ArrayList<>();
//        selectedLeaves.add("A");
//        selectedLeaves.add("Q");
//        selectedLeaves.add("L");
//        selectedLeaves.add("G");
//        Tuple<Network, Map<NetNode, NetNode>> t =  SuperNetwork3.getSubNetwork(Networks.readNetwork(s), selectedLeaves, true);
//        System.out.println(t.Item1.toString());
        }
    }

}